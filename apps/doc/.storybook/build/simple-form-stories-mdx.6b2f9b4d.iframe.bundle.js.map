{"version":3,"file":"simple-form-stories-mdx.6b2f9b4d.iframe.bundle.js","mappings":";AAeA;AAeA;ACKA;AAqEA;;;;;;;ACnDA;;;;;;ACuFA;;;;AC5HA;;;;AAMA;;;;;AAOA;;;AAKA;;;;;;;;;ACqFA;AA+BA;;;;;AAKA;AAUA;;;;;;;ACtJA;;;;;;;;;ACUA;;;ACgCA;;;;;;;;;AAkDA;;;;;;;;AAUA;;AAIA;;AAGA;;AA+CA;;;;;;;;ACjIA;;;;;;;;;;;;;;;AAiBA;;AAkBA;;;;;;ACWA;;;;;;AAiBA;;;AAkBA;;;;AAwBA;;AAvIA;AA4IA;;;;;;;;AAUA;ACtIA;AAQA;;;;;;;;;;;;ACRA;;;;;;;;;;;AC0CA;;;AC9CA;;AAIA","sources":["webpack://yith-components-doc/@yithUI/components/src/container/Container.tsx","webpack://yith-components-doc/@yithUI/components/src/icon-button/IconButton.tsx","webpack://yith-components-doc/@yithUI/components/src/date-picker/slots/Calendar.tsx","webpack://yith-components-doc/@yithUI/components/src/popover/Popover.tsx","webpack://yith-components-doc/@yithUI/components/src/form-control/FormControl.tsx","webpack://yith-components-doc/@yithUI/components/src/input/Input.tsx","webpack://yith-components-doc/@yithUI/components/src/backdrop/Backdrop.tsx","webpack://yith-components-doc/@yithUI/components/src/modal/Modal.tsx","webpack://yith-components-doc/@yithUI/components/src/radio-group/RadioGroup.tsx","webpack://yith-components-doc/@yithUI/components/src/spinner/Spinner.tsx","webpack://yith-components-doc/@yithUI/components/src/select/slots/SelectToggle.tsx","webpack://yith-components-doc/@yithUI/components/src/select/Select.tsx","webpack://yith-components-doc/@yithUI/components/src/skeleton/Skeleton.tsx","webpack://yith-components-doc/@yithUI/components/src/switch/Switch.tsx","webpack://yith-components-doc/@yithUI/components/src/time-selector/TimeSelector.tsx"],"sourcesContent":["import { Breakpoint, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype ContainerProps = React.ComponentProps<'div'> & {\n\tmaxWidth?: false | Breakpoint | number;\n\tsx?: SxProps;\n};\n\ntype ContainerOwnserState = {\n\tmaxWidth: false | Breakpoint | number;\n};\n\ntype StyledContainerProps = { ownerState: ContainerOwnserState };\n\nconst ContainerRoot = styled( 'div', { name: 'Container', slot: 'Root' } )<StyledContainerProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { maxWidth } = ownerState;\n\tconst style: any = {};\n\n\tif ( maxWidth !== false ) {\n\t\tif ( typeof maxWidth === 'string' && typeof theme.breakpoints.values[ maxWidth ] !== 'undefined' ) {\n\t\t\tstyle.maxWidth = theme.breakpoints.values[ maxWidth ] + theme.breakpoints.unit;\n\t\t} else {\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\treturn style;\n} }\n`;\n\nconst Container = forwardRef<HTMLDivElement, ContainerProps>( function Container(\n\t{ children, maxWidth = false, ...props },\n\tref\n) {\n\tconst ownerState: ContainerOwnserState = { maxWidth };\n\n\treturn (\n\t\t<ContainerRoot { ...props } ownerState={ ownerState } ref={ ref }>\n\t\t\t{ children }\n\t\t</ContainerRoot>\n\t);\n} );\n\nexport default Container;\n","import { alpha, FieldSize, PaletteClass, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype IconButtonOwnerState = {\n\t/**\n\t * The color of the icon button.\n\t */\n\tcolor: 'default' | 'inherit' | PaletteClass;\n\t/**\n\t * Set the variant to change the style of the icon button.\n\t */\n\tvariant: 'ghost' | 'shadowed';\n\t/**\n\t * The size.\n\t */\n\tsize: FieldSize;\n\t/**\n\t * The font size.\n\t */\n\tfontSize?: FieldSize | React.CSSProperties['fontSize'];\n\t/**\n\t * Sx props.\n\t */\n\tsx?: SxProps\n}\n\ntype IconButtonOwnProps = Partial<IconButtonOwnerState>;\ntype IconButtonPropsWithRef = Omit<React.ComponentProps<'button'>, keyof IconButtonOwnProps> & IconButtonOwnProps;\ntype IconButtonProps = Omit<IconButtonPropsWithRef, 'ref'>;\n\ntype StyledIconButtonProps = {\n\townerState: IconButtonOwnerState;\n};\n\nconst IconButtonRoot = styled( 'button', { name: 'IconButton', slot: 'Root' } )<StyledIconButtonProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { color, variant, size } = ownerState;\n\n\tlet mainColor = theme.palette.action.active;\n\tif ( color !== 'default' && color !== 'inherit' ) {\n\t\tmainColor = theme.palette[ color ].main;\n\t}\n\n\tconst padding = {\n\t\tsm: 9,\n\t\tmd: 12,\n\t\tlg: 15,\n\t\txl: 18,\n\t}[ size ];\n\n\n\tconst fontSizeMapping = {\n\t\tsm: 14,\n\t\tmd: 16,\n\t\tlg: 18,\n\t\txl: 20,\n\t};\n\tconst fontSize = fontSizeMapping[ ownerState.fontSize as FieldSize ] ?? ownerState.fontSize ?? fontSizeMapping[ size ];\n\n\treturn {\n\t\ttextAlign: 'center',\n\t\tflex: '0 0 auto',\n\t\tfontSize: fontSize,\n\t\tpadding: padding,\n\t\tborder: 0,\n\t\tborderRadius: '50%',\n\t\tcursor: 'pointer',\n\t\tlineHeight: 0,\n\t\tcolor: 'inherit' !== color ? mainColor : color,\n\t\tbackground: 'transparent',\n\t\tboxShadow: `0 0 0 8px ${ alpha( mainColor, 0 ) }`,\n\t\ttransition: 'background .3s ease-in-out, box-shadow .3s ease-in-out',\n\t\t'&:disabled': {\n\t\t\tpointerEvents: 'none',\n\t\t\topacity: theme.palette.action.disabledOpacity\n\t\t},\n\t\t...( variant === 'ghost' && {\n\t\t\t'&:hover': {\n\t\t\t\tbackground: alpha( mainColor, theme.palette.action.hoverOpacity ),\n\t\t\t\tboxShadow: `0 0 0 0px ${ alpha( mainColor, theme.palette.action.hoverOpacity ) }`,\n\t\t\t},\n\t\t\t'&:focus-visible': {\n\t\t\t\tborder: 0,\n\t\t\t\toutline: 0,\n\t\t\t\tboxShadow: '0 0 0 3px ' + alpha( mainColor, theme.palette.action.focusOpacity ),\n\t\t\t},\n\t\t} ),\n\t\t...( variant === 'shadowed' && {\n\t\t\tbackground: theme.palette.background.default,\n\t\t\tboxShadow: `0 2px 7px 0 rgba(170,198,222, .5)`,\n\t\t\t'&:hover': {\n\t\t\t\tboxShadow: `0 3px 10px 0 rgba(170,198,222, .6)`,\n\t\t\t},\n\t\t\t'&:focus-visible': {\n\t\t\t\tborder: 0,\n\t\t\t\toutline: 0,\n\t\t\t\tboxShadow: '0 3px 12px 0 rgba(170,198,222, .6), 0 0 0 3px rgba(170,198,222, .2)',\n\t\t\t},\n\t\t} ),\n\n\t};\n} }\n`;\n\nconst IconButton = forwardRef<HTMLButtonElement, IconButtonProps>( function IconButton(\n\t{\n\t\ttype = 'button',\n\t\tcolor = 'default',\n\t\tvariant = 'ghost',\n\t\tsize = 'md',\n\t\tfontSize,\n\t\tchildren,\n\t\t...other\n\t},\n\tref ) {\n\tconst ownerState: IconButtonOwnerState = { color, variant, size, fontSize };\n\treturn (\n\t\t<IconButtonRoot type={ type } ref={ ref } ownerState={ ownerState } { ...other }>\n\t\t\t{ children }\n\t\t</IconButtonRoot>\n\t);\n} );\n\nexport default IconButton;\n","import { __ } from \"@wordpress/i18n\";\nimport { styled } from \"@yith/styles\";\nimport { formatDateSameTimezone, addMonths } from \"@yith/date\";\nimport { ChevronLeftIcon, ChevronRightIcon } from \"@heroicons/react/24/outline\";\n\nimport { useDatePickerContext } from \"../context\";\nimport Stack from \"../../stack\";\nimport IconButton from \"../../icon-button\";\nimport DayPicker from \"./DayPicker\";\nimport { useId } from \"../../utils\";\nimport React from \"react\";\n\nconst DatePickerCalendarRoot = styled( 'div', { name: 'DatePicker', slot: 'Calendar' } )( ( { theme } ) => (\n\t{\n\t\tpadding: 12,\n\t\tfontSize: theme.fields.fontSize,\n\t}\n) );\nconst DatePickerCalendarHeader = styled( Stack, { name: 'DatePicker', slot: 'CalendarHeader' } )( () => (\n\t{}\n) );\nconst DatePickerCalendarHeaderLabel = styled( 'div', { name: 'DatePicker', slot: 'CalendarHeaderLabel' } )`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nflex: 1;\nfont-weight: 600;\nfont-size: 1.1em;\n`;\n\nconst Calendar = ( { className, autoFocus = false }: { className: string, autoFocus?: boolean } ) => {\n\tconst { internalDate, setInternalDate, isPrevMonthDisabled, isNextMonthDisabled } = useDatePickerContext();\n\tconst id = useId();\n\tconst gridLabelId = `${ id }:grid-label`;\n\n\treturn <DatePickerCalendarRoot className={ className }>\n\t\t<DatePickerCalendarHeader spacing={ 2 } direction='row'>\n\t\t\t<IconButton\n\t\t\t\tonClick={ () => setInternalDate( _ => addMonths( _, -1 ) ) }\n\t\t\t\taria-label={ __( 'Previous month', 'yith-plugin-fw' ) }\n\t\t\t\tdisabled={ isPrevMonthDisabled( internalDate ) }\n\t\t\t><ChevronLeftIcon width=\"1em\"/></IconButton>\n\t\t\t<DatePickerCalendarHeaderLabel aria-live=\"polite\" id={ gridLabelId }>{ formatDateSameTimezone( 'F Y', internalDate ) }</DatePickerCalendarHeaderLabel>\n\t\t\t<IconButton\n\t\t\t\tonClick={ () => setInternalDate( _ => addMonths( _, 1 ) ) }\n\t\t\t\taria-label={ __( 'Next month', 'yith-plugin-fw' ) }\n\t\t\t\tdisabled={ isNextMonthDisabled( internalDate ) }\n\t\t\t><ChevronRightIcon width=\"1em\"/></IconButton>\n\t\t</DatePickerCalendarHeader>\n\t\t<DayPicker autoFocus={ autoFocus } gridLabelId={ gridLabelId }/>\n\t</DatePickerCalendarRoot>;\n}\n\nexport default Calendar;","import { createPortal } from 'react-dom';\nimport React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { styled } from '@yith/styles';\nimport type { PopoverComputedPosition, PopoverComputePositionProps } from \"./types.internal\";\nimport type { PopoverProps } from \"./types\";\n\nconst PopoverRoot = styled( 'div', { name: 'Popover', slot: 'Root' } )`\n\tposition: fixed;\n\tz-index: 9999999;\n\tdisplay: flex;\n\tflex-direction: column;\n\theight: fit-content;\n`;\n\nconst getAnchorRect = ( anchorRef: HTMLElement ) => {\n\treturn typeof anchorRef?.getBoundingClientRect === 'function' ? anchorRef.getBoundingClientRect() : null;\n};\n\nconst computePopoverPosition = ( {\n\t\t\t\t\t\t\t\t\t anchorRect,\n\t\t\t\t\t\t\t\t\t container,\n\t\t\t\t\t\t\t\t\t position,\n\t\t\t\t\t\t\t\t\t verticalMargin = 0,\n\t\t\t\t\t\t\t\t\t forceMinWidth,\n\t\t\t\t\t\t\t\t\t forceInView = true\n\t\t\t\t\t\t\t\t }: PopoverComputePositionProps ) => {\n\tlet [ yPos, xPos ] = position.split( ' ' );\n\tconst computed: PopoverComputedPosition = {} as PopoverComputedPosition;\n\tconst containerRect = container.getBoundingClientRect();\n\n\tconst { clientWidth: viewportWidth, clientHeight: viewportHeight } = document.documentElement;\n\n\tlet minWidth = 0;\n\n\tif ( true === forceMinWidth ) {\n\t\tminWidth = anchorRect.width;\n\t} else if ( false !== forceMinWidth ) {\n\t\tminWidth = forceMinWidth;\n\t}\n\n\tconst positions = {\n\t\tleft: anchorRect.left,\n\t\tright: viewportWidth - anchorRect.right,\n\t\ttop: anchorRect.top + anchorRect.height + verticalMargin,\n\t\tbottom: viewportHeight - anchorRect.top + verticalMargin,\n\t};\n\n\tconst allowedXPos = [];\n\tif ( positions.left + containerRect.width <= viewportWidth ) {\n\t\tallowedXPos.push( 'left' );\n\t}\n\tif ( positions.right + containerRect.width <= viewportWidth ) {\n\t\tallowedXPos.push( 'right' );\n\t}\n\n\tif ( !allowedXPos.length ) {\n\t\t// Choose the best one.\n\t\tif ( positions.left < positions.right ) {\n\t\t\tallowedXPos.push( 'left' );\n\t\t} else {\n\t\t\tallowedXPos.push( 'right' );\n\t\t}\n\t}\n\n\tconst allowedYPos = [];\n\tif ( positions.top + containerRect.height <= viewportHeight ) {\n\t\tallowedYPos.push( 'bottom' );\n\t}\n\tif ( positions.bottom + containerRect.height <= viewportHeight ) {\n\t\tallowedYPos.push( 'top' );\n\t}\n\n\tif ( !allowedYPos.length ) {\n\t\t// Choose the best one.\n\t\tif ( positions.top < positions.bottom ) {\n\t\t\tallowedYPos.push( 'bottom' );\n\t\t} else {\n\t\t\tallowedYPos.push( 'top' );\n\t\t}\n\t}\n\n\txPos = !allowedXPos.includes( xPos ) ? allowedXPos[ 0 ] : xPos;\n\tyPos = !allowedYPos.includes( yPos ) ? allowedYPos[ 0 ] : yPos;\n\n\tif ( 'left' === xPos ) {\n\t\tcomputed.left = positions.left;\n\t} else {\n\t\tcomputed.right = positions.right;\n\t}\n\n\tif ( 'bottom' === yPos ) {\n\t\tcomputed.top = positions.top;\n\t} else {\n\t\tcomputed.bottom = positions.bottom;\n\t}\n\n\tif ( [ true, 'horizontally' ].includes( forceInView ) ) {\n\t\tcomputed?.left && ( computed.left = Math.max( 0, computed.left ) );\n\t\tcomputed?.right && ( computed.right = Math.max( 0, computed.right ) );\n\n\t\tcomputed.maxWidth = viewportWidth - ( computed?.left ?? computed?.right );\n\t}\n\n\tif ( [ true, 'vertically' ].includes( forceInView ) ) {\n\t\tcomputed?.top && ( computed.top = Math.max( 0, computed.top ) );\n\t\tcomputed?.bottom && ( computed.bottom = Math.max( 0, computed.bottom ) );\n\n\t\tcomputed.maxHeight = viewportHeight - ( computed?.top ?? computed?.bottom );\n\t}\n\n\tif ( minWidth ) {\n\t\tcomputed.minWidth = minWidth;\n\n\t\tif ( typeof computed.maxWidth !== 'undefined' ) {\n\t\t\tcomputed.minWidth = Math.min( computed.minWidth, computed.maxWidth );\n\t\t}\n\t}\n\n\tcomputed.xPos = 'left' in computed ? 'left' : 'right';\n\tcomputed.yPos = 'top' in computed ? 'bottom' : 'top';\n\n\tconst { offsetParent } = container;\n\n\t/**\n\t * If there is a positioned ancestor element that is not the body,\n\t * subtract the position from the anchor rect.\n\t * Useful in case of disabling the Portal.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent\n\t */\n\tif ( offsetParent && offsetParent !== document.body ) {\n\t\tconst offsetParentRect = offsetParent.getBoundingClientRect();\n\t\ttypeof computed.left !== 'undefined' && ( computed.left -= offsetParentRect.left );\n\t\ttypeof computed.right !== 'undefined' && ( computed.right -= viewportWidth - offsetParentRect.right );\n\t\ttypeof computed.top !== 'undefined' && ( computed.top -= offsetParentRect.top );\n\t\ttypeof computed.bottom !== 'undefined' && ( computed.bottom -= viewportHeight - offsetParentRect.bottom );\n\t}\n\n\treturn computed;\n};\n\nconst cssSize = ( size?: number | string ) => {\n\tif ( size === undefined ) {\n\t\treturn '';\n\t}\n\treturn typeof size === 'string' ? size : `${ size }px`;\n};\n\nconst setStyles = ( element: HTMLElement, styles: React.CSSProperties ) => {\n\tObject.assign( element.style, styles );\n};\n\nfunction setAttribute( element: HTMLElement, prop: string, value: string ) {\n\tif ( !value ) {\n\t\tif ( element.hasAttribute( prop ) ) {\n\t\t\telement.removeAttribute( prop );\n\t\t}\n\t} else if ( element.getAttribute( prop ) !== value ) {\n\t\telement.setAttribute( prop, value );\n\t}\n}\n\nfunction Popover(\n\t{\n\t\tanchorRef,\n\t\tposition = 'bottom left',\n\t\tchildren,\n\t\tverticalMargin = 0,\n\t\tonClickOutside,\n\t\tforceMinWidth = false,\n\t\tdisablePortal = false,\n\t\tforceInView = true,\n\t\t...other\n\t}: PopoverProps\n) {\n\tconst containerRef = useRef<HTMLDivElement>( null );\n\tconst syntheticEventRef = useRef( false );\n\n\t// Keep track of click events that bubbled up through the portal.\n\tconst handleSynthetic = () => {\n\t\tsyntheticEventRef.current = true;\n\t};\n\n\tuseLayoutEffect( () => {\n\t\tif ( !containerRef.current || !anchorRef ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst refresh = () => {\n\t\t\tconst container = containerRef.current;\n\t\t\tconst anchorRect = getAnchorRect( anchorRef );\n\n\t\t\tif ( container && anchorRect ) {\n\t\t\t\tconst popoverPosition = computePopoverPosition( {\n\t\t\t\t\tanchorRect,\n\t\t\t\t\tcontainer,\n\t\t\t\t\tposition,\n\t\t\t\t\tverticalMargin,\n\t\t\t\t\tforceMinWidth,\n\t\t\t\t\tforceInView\n\t\t\t\t} );\n\n\t\t\t\tsetStyles(\n\t\t\t\t\tcontainer,\n\t\t\t\t\t{\n\t\t\t\t\t\tleft: cssSize( popoverPosition.left ),\n\t\t\t\t\t\tright: cssSize( popoverPosition.right ),\n\t\t\t\t\t\ttop: cssSize( popoverPosition.top ),\n\t\t\t\t\t\tbottom: cssSize( popoverPosition.bottom ),\n\t\t\t\t\t\tmaxWidth: cssSize( popoverPosition.maxWidth ),\n\t\t\t\t\t\tmaxHeight: cssSize( popoverPosition.maxHeight ),\n\t\t\t\t\t\tminWidth: cssSize( popoverPosition.minWidth ),\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\tsetAttribute( container, 'data-x-pos', popoverPosition.xPos );\n\t\t\t\tsetAttribute( container, 'data-y-pos', popoverPosition.yPos );\n\t\t\t}\n\t\t};\n\n\t\trefresh();\n\n\t\t/**\n\t\t * It's useful refreshing position with some interval,\n\t\t * since there are something that can skip at resize/scroll events.\n\t\t * So, we can refresh position each 0.5 seconds.\n\t\t */\n\t\tconst refreshInterval = setInterval( refresh, 500 );\n\n\t\twindow.addEventListener( 'resize', refresh );\n\t\twindow.addEventListener( 'scroll', refresh, true );\n\n\t\treturn () => {\n\t\t\t!!refreshInterval && clearInterval( refreshInterval );\n\n\t\t\twindow.removeEventListener( 'resize', refresh );\n\t\t\twindow.removeEventListener( 'scroll', refresh );\n\t\t};\n\t}, [ anchorRef ] );\n\n\tconst handleClickOutside = ( event: MouseEvent ) => {\n\t\tif ( containerRef?.current && event?.target ) {\n\t\t\t// The container MUST exist.\n\t\t\tconst theTarget = event.target as HTMLElement;\n\t\t\tconst isContainerClick = containerRef.current.contains( theTarget );\n\t\t\tconst isAnchorClick = anchorRef && anchorRef.contains( theTarget );\n\t\t\tconst isInsideReactTree = syntheticEventRef.current;\n\t\t\tsyntheticEventRef.current = false;\n\n\t\t\tif ( !isContainerClick && !isAnchorClick && !isInsideReactTree ) {\n\t\t\t\tonClickOutside?.( event );\n\t\t\t}\n\t\t}\n\t};\n\n\tuseEffect( () => {\n\t\tdocument.addEventListener( 'mousedown', handleClickOutside );\n\t\treturn () => {\n\t\t\tdocument.removeEventListener( 'mousedown', handleClickOutside );\n\t\t\tsyntheticEventRef.current = false;\n\t\t};\n\t} );\n\n\tconst popover = (\n\t\t<PopoverRoot role=\"presentation\" { ...other } ref={ containerRef } onMouseDown={ handleSynthetic }>\n\t\t\t{ children }\n\t\t</PopoverRoot>\n\t);\n\n\treturn disablePortal ? popover : createPortal( popover, document.body );\n}\n\nexport default Popover;\n","import { styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype FormControlProps = React.ComponentProps<'div'> & {\n\tlabel: string;\n\thtmlFor?: string;\n\thelp?: React.ReactNode;\n\tsx?: SxProps;\n};\n\nconst FormControlRoot = styled( 'div', { name: 'FormControl', slot: 'Root' } )`\n\tdisplay: flex;\n\talign-items: baseline;\n\tmargin: 15px 0 35px;\n`;\n\nconst FormControlLabel = styled( 'label', { name: 'FormControl', slot: 'Label' } )`\n\twidth: 135px;\n\tmargin-right: 10px;\n\tflex: 0 0 135px;\n`;\n\nconst FormControlContent = styled( 'div', { name: 'FormControl', slot: 'Content' } )`\n\tflex: 1;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n`;\n\nconst FormControlHelp = styled( 'div', { name: 'FormControl', slot: 'Help' } )`\n\tfont-size: 0.95em;\n\tmargin-top: 7px;\n`;\n\nconst FormControl = forwardRef<HTMLDivElement, FormControlProps>( function FormControl(\n\t{\n\t\tchildren,\n\t\tlabel,\n\t\thtmlFor = '',\n\t\thelp = '',\n\t\t...other\n\t},\n\tref\n) {\n\treturn (\n\t\t<FormControlRoot ref={ ref } { ...other }>\n\t\t\t<FormControlLabel htmlFor={ htmlFor }>{ label }</FormControlLabel>\n\t\t\t<FormControlContent>\n\t\t\t\t{ children }\n\t\t\t\t{ !!help && <FormControlHelp>{ help }</FormControlHelp> }\n\t\t\t</FormControlContent>\n\t\t</FormControlRoot>\n\t);\n} );\n\nexport default FormControl;\n","import { styled } from '@yith/styles';\nimport { noop } from 'lodash';\nimport React from 'react';\nimport { forwardRef, useState } from 'react';\nimport type { InputOwnerState, InputProps, InputStyled } from \"./types\";\n\nconst splitPadding = ( padding: React.CSSProperties[ 'padding' ] ) => {\n\tconst sPadding = padding?.toString().split( ' ' );\n\tconst length = sPadding?.length;\n\n\tif ( !length ) {\n\t\treturn {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0,\n\t\t};\n\t}\n\n\treturn {\n\t\ttop: sPadding[ 0 ],\n\t\tright: sPadding[ 1 ] ?? sPadding[ 0 ],\n\t\tbottom: sPadding[ 2 ] ?? sPadding[ 0 ],\n\t\tleft: sPadding[ 3 ] ?? sPadding[ 1 ] ?? sPadding[ 0 ],\n\t};\n};\n\nconst RESET_STYLES: React.CSSProperties = {\n\t// @ts-ignore\n\tappearance: 'none !important',\n\tdisplay: 'block !important',\n\twidth: '100% !important',\n\tminWidth: '0 !important',\n\tbackgroundColor: 'transparent !important',\n\t// @ts-ignore\n\tboxSizing: 'border-box !important',\n\tborder: '1px solid transparent !important',\n\tcolor: 'inherit !important',\n\tfontFamily: 'inherit !important',\n\tmargin: '0 !important',\n\toutline: 'none !important',\n\theight: 'auto !important',\n\tlineHeight: '1.5em !important',\n\tboxShadow: 'none !important'\n};\n\nconst InputRoot = styled( 'div', {\n\tname: 'Input',\n\tslot: 'Root',\n} )<InputStyled>( ( { theme, ownerState } ) => {\n\tconst { isMini, hasStartAdornment, hasEndAdornment, fullWidth } = ownerState;\n\tconst style: React.CSSProperties = {\n\t\tborderRadius: theme.fields.borderRadius,\n\t\tfontSize: theme.fields.fontSize,\n\t\tbackground: 'transparent',\n\t\tcolor: theme.fields.color,\n\t\twidth: !isMini && fullWidth ? '100%' : 'fit-content',\n\t\tflex: !isMini && fullWidth ? '1 1 0%' : '0 1 0%',\n\t};\n\tconst padding = splitPadding( theme.fields.padding[ ownerState.size ] );\n\n\tif ( hasStartAdornment ) {\n\t\tstyle.paddingLeft = padding.left;\n\t}\n\tif ( hasEndAdornment ) {\n\t\tstyle.paddingRight = padding.right;\n\t}\n\n\treturn {\n\t\tdisplay: 'inline-flex',\n\t\talignItems: 'center',\n\t\tboxSizing: 'border-box',\n\t\tposition: 'relative',\n\t\tzIndex: 1,\n\t\t...style\n\t}\n} );\n\nconst InputField = styled( 'input', {\n\tname: 'Input',\n\tslot: 'Field',\n} )<InputStyled>( ( { theme, ownerState } ) => {\n\tconst { isMini, hasStartAdornment, hasEndAdornment, fullWidth } = ownerState;\n\tconst padding = splitPadding( theme.fields.padding[ ownerState.size ] );\n\n\tif ( hasStartAdornment ) {\n\t\tpadding.left = '0px';\n\t}\n\tif ( hasEndAdornment ) {\n\t\tpadding.right = '0px';\n\t}\n\n\tconst paddingProp = `${ padding.top } ${ padding.right } ${ padding.bottom } ${ padding.left }`;\n\n\tconst minWidth = `calc(60px + ${ padding.right } + ${ padding.left })`;\n\n\treturn {\n\t\t...RESET_STYLES,\n\t\tpadding: paddingProp + ' !important',\n\t\tfontSize: 'inherit' + ' !important',\n\t\twidth: ( !isMini ? ( fullWidth ? '100%' : 'auto' ) : minWidth ) + ' !important',\n\t\t'&::placeholder': {\n\t\t\tcolor: theme.fields.placeholderColor\n\t\t},\n\t\t...( ownerState.disabled && {\n\t\t\topacity: theme.palette.action.disabledOpacity,\n\t\t} )\n\t};\n} );\n\nconst InputBackdrop = styled( 'div', { name: 'Input', slot: 'Backdrop' } )<InputStyled>`\n\tbox-sizing: border-box;\n\tborder-radius: inherit;\n\tinset: 0px;\n\tmargin: 0px;\n\tpadding: 0px;\n\tpointer-events: none;\n\tposition: absolute;\n\n\t${ ( { theme, ownerState } ) => {\n\t\tconst { isFocused, variant } = ownerState;\n\n\t\tconst style: React.CSSProperties = {\n\t\t\tbackground: theme.fields.background,\n\t\t\tborderColor: theme.fields.borderColor,\n\t\t\tfontSize: theme.fields.fontSize,\n\t\t\tzIndex: -1\n\t\t};\n\n\t\tconst variantStyles = {\n\t\t\toutlined: {\n\t\t\t\tborderStyle: 'solid',\n\t\t\t\tborderWidth: '1px',\n\t\t\t\tborderColor: theme.fields.borderColor,\n\t\t\t\t...( isFocused && {\n\t\t\t\t\tborderColor: theme.fields.focusedBorderColor,\n\t\t\t\t\tboxShadow: theme.fields.focusedBoxShadow,\n\t\t\t\t} ),\n\t\t\t},\n\t\t\tghost: {},\n\t\t}[ variant ];\n\n\t\treturn { ...style, ...variantStyles };\n\t} }\n`;\n\ntype InputAdornmentOwnerState = {\n\tposition: 'start' | 'end';\n};\n\nconst InputAdornment = styled( 'div', { name: 'Input', slot: 'Adornment' } )<{ ownerState: InputAdornmentOwnerState }>`\n\tdisplay: flex;\n\talign-items: center;\n\theight: 0.01em;\n\twhite-space: nowrap;\n\t${ ( { theme, ownerState } ) => {\n\t\tconst { position } = ownerState;\n\n\t\treturn {\n\t\t\t[ `margin${ 'start' === position ? 'Right' : 'Left' }` ]: '14px',\n\t\t\tcolor: theme.palette.action.active,\n\t\t};\n\t} }\n`;\n\nconst Input = forwardRef<HTMLInputElement, InputProps>( function Input(\n\t{\n\t\ttype = 'text',\n\t\tvalue,\n\t\tvariant = 'outlined',\n\t\tonChange = noop,\n\t\tonFocus = noop,\n\t\tonBlur = noop,\n\t\tstartAdornment,\n\t\tendAdornment,\n\t\tisMini = false,\n\t\tfullWidth = false,\n\t\tdisabled = false,\n\t\tsize = 'md',\n\t\t...other\n\t},\n\tref\n) {\n\tconst [ isFocused, setIsFocused ] = useState( false );\n\n\tconst handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\tif ( event.nativeEvent.defaultPrevented || disabled ) {\n\t\t\treturn;\n\t\t}\n\t\tconst newValue = event.target.value ?? '';\n\t\tonChange( event, newValue );\n\t};\n\n\tconst ownerState: InputOwnerState = {\n\t\tvariant,\n\t\tsize,\n\t\tisFocused,\n\t\tisMini,\n\t\tfullWidth,\n\t\tdisabled,\n\t\thasStartAdornment: !!startAdornment,\n\t\thasEndAdornment: !!endAdornment,\n\t};\n\n\treturn (\n\t\t<InputRoot ownerState={ ownerState }>\n\t\t\t{ !!startAdornment && <InputAdornment ownerState={ { position: 'start' } }>{ startAdornment }</InputAdornment> }\n\t\t\t<InputField\n\t\t\t\tref={ ref }\n\t\t\t\ttype={ type }\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\tonFocus={ ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\t\t\t\tsetIsFocused( true );\n\t\t\t\t\tonFocus( e );\n\t\t\t\t} }\n\t\t\t\tonBlur={ ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\t\t\t\tsetIsFocused( false );\n\t\t\t\t\tonFocus( e );\n\t\t\t\t} }\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\townerState={ ownerState }\n\t\t\t\tdisabled={ disabled }\n\t\t\t\t{ ...other }\n\t\t\t/>\n\t\t\t{ !!endAdornment && <InputAdornment ownerState={ { position: 'end' } }>{ endAdornment }</InputAdornment> }\n\t\t\t<InputBackdrop ownerState={ ownerState }/>\n\t\t</InputRoot>\n\t);\n} );\n\n\nexport default Input;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport { generateComponentClasses, keyframes, styled } from \"@yith/styles\";\n\nimport type { BackdropProps, BackdropStyled } from \"./types\";\n\nconst fadeInAnimation = keyframes`\nfrom {\n\topacity: 0;\n}\nto {\n\topacity: 1;\n}\n`;\n\nconst BackdropRoot = styled( 'div', { name: 'Backdrop', slot: 'Root' } )(\n\t( { theme }: BackdropStyled ) => ( {\n\t\tposition: 'fixed',\n\t\ttop: 0,\n\t\tleft: 0,\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tbackground: theme.palette.background.backdrop,\n\t\tbackdropFilter: 'blur(4px)',\n\t\tanimation: `${fadeInAnimation} .3s forwards`\n\t} )\n);\n\nconst useComponentClasses = () => {\n\treturn generateComponentClasses(\n\t\t'Backdrop',\n\t\t{\n\t\t\troot: [ 'root' ]\n\t\t}\n\t)\n}\n\nconst Backdrop = React.forwardRef<HTMLDivElement, BackdropProps>( function Backdrop(\n\t{\n\t\tclassName,\n\t\tchildren,\n\t\t...other\n\t},\n\tref\n) {\n\n\tconst classes = useComponentClasses()\n\n\treturn <BackdropRoot\n\t\tref={ ref }\n\t\taria-hidden\n\t\tclassName={ classNames( classes.root, className ) }\n\t\t{ ...other }\n\t>\n\t\t{ children }\n\t</BackdropRoot>\n} )\n\nexport default Backdrop;","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\nimport { XMarkIcon } from \"@heroicons/react/20/solid\";\n\nimport { Breakpoint, generateComponentClasses, keyframes, styled } from \"@yith/styles\";\n\nimport type { ModalOwnerState, ModalProps, ModalStyled } from \"./types\";\nimport Portal from \"../portal\";\nimport Backdrop from \"../backdrop\";\nimport IconButton from \"../icon-button\";\nimport Paper from \"../paper\";\nimport { useMainView } from \"../utils\";\nimport { FocusTrap } from \"../focus-trap\";\n\nconst appearFromBottomAnimation = keyframes`\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(30%);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n`;\n\nconst ModalRoot = styled( 'div', { name: 'Modal', slot: 'Root' } )(\n\t( { theme } ) => ( {\n\t\tposition: 'fixed',\n\t\tzIndex: theme.zIndex.modal,\n\t\tinset: '0px'\n\t} ) );\n\nconst ModalBackdrop = styled( Backdrop, { name: 'Modal', slot: 'Backdrop' } )( () => ( {\n\tzIndex: -1\n} ) );\n\nconst ModalClose = styled( IconButton, { name: 'Modal', slot: 'Close' } )( () => ( {\n\tposition: 'absolute',\n\ttop: 4,\n\tright: 4,\n\t'& > svg': {\n\t\twidth: '1em'\n\t}\n} ) );\n\nconst ModalContainer = styled( 'div', { name: 'Modal', slot: 'Container' } )( () => ( {\n\theight: '100%',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'center'\n} ) );\n\nconst ModalPaper = styled( Paper, { name: 'Modal', slot: 'Paper' } )<ModalStyled>( ( { ownerState, theme } ) => ( {\n\tmargin: 32,\n\toverflowX: 'auto',\n\tdisplay: 'flex',\n\tflexDirection: 'column',\n\tmaxHeight: 'calc(100% - 64px)',\n\tanimation: `${ appearFromBottomAnimation } .3s forwards`,\n\t...( ownerState.maxWidth === 'xs' && {\n\t\tmaxWidth: theme.breakpoints.unit === 'px' ? Math.max( theme.breakpoints.values.xs, 400 ) : `max( ${ theme.breakpoints.values.xs }${ theme.breakpoints.unit }, 400px )`\n\t} ),\n\t...( ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {\n\t\tmaxWidth: theme.breakpoints.values[ ownerState.maxWidth as Breakpoint ] ?? ownerState.maxWidth\n\t} ),\n\t...( ownerState.fullWidth && {\n\t\twidth: '100%'\n\t} )\n} ) );\n\nconst useComponentClasses = () => {\n\treturn generateComponentClasses(\n\t\t'Modal',\n\t\t{\n\t\t\troot: [ 'root' ],\n\t\t\tbackdrop: [ 'backdrop' ],\n\t\t\tcontainer: [ 'container' ],\n\t\t\tpaper: [ 'paper' ],\n\t\t\tclose: [ 'close' ],\n\t\t}\n\t)\n}\n\nconst Modal = forwardRef<HTMLDivElement, ModalProps>( function Modal(\n\t{\n\t\tclassName,\n\t\topen = false,\n\t\tdisablePortal = false,\n\t\tmaxWidth = 'sm',\n\t\tfullWidth = true,\n\t\tonClose,\n\t\tchildren,\n\t\tdisableRestoreFocus = false,\n\t\tdisableAutoFocus = false,\n\t\tdisableConstrainedFocus = false,\n\t},\n\tref\n) {\n\n\tuseMainView(\n\t\topen,\n\t\t{\n\t\t\tonEscapeKeyDown: ( event ) => onClose?.( event, 'escapeKeyDown' )\n\t\t}\n\t);\n\n\tconst ownerState: ModalOwnerState = {\n\t\tmaxWidth,\n\t\tfullWidth\n\t};\n\n\tconst isBackdropClick = React.useRef( false );\n\tconst handleMouseDown = ( event: React.MouseEvent ) => {\n\t\tisBackdropClick.current = event.target === event.currentTarget;\n\t};\n\n\tconst handleBackdropClick = ( event: React.MouseEvent ) => {\n\t\tif ( !isBackdropClick.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\tisBackdropClick.current = false;\n\n\t\tonClose?.( event, 'backdropClick' );\n\t}\n\n\tconst handleCloseIconClick = ( event: React.MouseEvent ) => {\n\t\tonClose?.( event, 'closeIconClick' );\n\t}\n\n\tconst classes = useComponentClasses();\n\n\tif ( !open ) {\n\t\treturn null;\n\t}\n\n\treturn <Portal disablePortal={ disablePortal }>\n\t\t<ModalRoot ref={ ref } role=\"presentation\" onClick={ handleBackdropClick } className={ classNames( classes.root, className ) }>\n\t\t\t<ModalBackdrop className={ classes.backdrop }/>\n\t\t\t<ModalContainer onMouseDown={ handleMouseDown } className={ classes.container }>\n\t\t\t\t<FocusTrap open disableRestoreFocus={ disableRestoreFocus } disableAutoFocus={ disableAutoFocus } disableConstrainedFocus={ disableConstrainedFocus }>\n\t\t\t\t\t<ModalPaper className={ classes.paper } ownerState={ ownerState } elevation={ 24 }>\n\t\t\t\t\t\t{ children }\n\t\t\t\t\t\t<ModalClose className={ classes.close } onClick={ handleCloseIconClick } size=\"sm\" fontSize=\"lg\"><XMarkIcon/></ModalClose>\n\t\t\t\t\t</ModalPaper>\n\t\t\t\t</FocusTrap>\n\t\t\t</ModalContainer>\n\t\t</ModalRoot>\n\t</Portal>\n} );\n\nexport default Modal;","import { PaletteClass, styled, SxProps } from '@yith/styles';\nimport { noop } from 'lodash';\nimport React from 'react';\nimport Stack from '../stack';\nimport { useControlledState } from '../utils';\n\ntype RadioGroupOption = {\n\tvalue: string;\n\tlabel: React.ReactNode;\n\tdescription?: React.ReactNode;\n\tcolor?: PaletteClass;\n};\n\ntype RadioGroupProps = {\n\t/**\n\t * The value of the radio group (if controlled).\n\t */\n\tvalue?: string;\n\t/**\n\t * The HTML name for the radio fields.\n\t */\n\tname?: string;\n\t/**\n\t * Triggered when the value changes (if controlled).\n\t */\n\tonChange?: ( event: React.ChangeEvent<HTMLInputElement>, value: string ) => void;\n\t/**\n\t * The options to be shown.\n\t */\n\toptions?: RadioGroupOption[];\n\t/**\n\t * The color of the radio options.\n\t */\n\tcolor?: PaletteClass;\n\t/**\n\t * Sx props.\n\t */\n\tsx?: SxProps;\n};\n\ntype RadioGroupOptionOwnerState = {\n\tisChecked: boolean;\n\tcolor: PaletteClass;\n};\n\ntype StyledRadioGroupOptionProps = { ownerState: RadioGroupOptionOwnerState };\n\nconst RadioGroupRoot = styled( Stack, { name: 'RadioGroup', slot: 'Root' } )( ( { theme } ) => ( {\n\tfontSize: theme.fields.fontSize,\n\tlineHeight: 1.5\n} ) );\n\nconst RadioGroupItem = styled( 'label', { name: 'RadioGroup', slot: 'Item' } )`\n\tdisplay: flex;\n\talign-items: baseline;\n`;\n\nconst RadioGroupRadioShape = styled( 'div', { name: 'RadioGroup', slot: 'RadioShape' } )<StyledRadioGroupOptionProps>(\n\t( { ownerState, theme } ) => ( {\n\t\tdisplay: 'flex',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tflex: '0 0 16px',\n\t\tborderRadius: '50%',\n\t\twidth: '16px',\n\t\theight: '16px',\n\t\tborder: `1px solid ${ theme.fields.borderColor }`,\n\t\ttransform: 'translateY( 3px )',\n\t\tmarginRight: '8px',\n\t\tboxSizing: 'border-box',\n\t\t'&:after': {\n\t\t\tcontent: '\"\"',\n\t\t\tposition: 'absolute',\n\t\t\tborderRadius: 'inherit',\n\t\t\tbackground: theme.palette[ ownerState.color ].contrastText,\n\t\t\twidth: ownerState.isChecked ? 6 : 0,\n\t\t\theight: ownerState.isChecked ? 6 : 0,\n\t\t\topacity: ownerState.isChecked ? 1 : 0,\n\t\t\ttransition: 'all .2s ease',\n\t\t},\n\t\t'&:before': {\n\t\t\tcontent: '\"\"',\n\t\t\tposition: 'absolute',\n\t\t\tborderRadius: 'inherit',\n\t\t\tborder: `2px solid ${theme.palette[ ownerState.color ].main}`,\n\t\t\twidth: 20,\n\t\t\theight: 20,\n\t\t\tboxSizing: 'content-box',\n\t\t\ttransition: 'all .2s ease',\n\t\t\topacity: 0\n\t\t},\n\t\t...( ownerState.isChecked && {\n\t\t\tbackground: theme.palette[ ownerState.color ].main,\n\t\t\tborderColor: '#0000'\n\t\t} )\n\t} )\n);\n\nconst RadioGroupRadio = styled( 'input', { name: 'RadioGroup', slot: 'Radio' } )<StyledRadioGroupOptionProps>`\n\tdisplay: block !important;\n\topacity: 0 !important;\n\tposition: absolute !important;\n\tmargin-top: 5px !important;\n\twidth: 20px !important;\n\theight: 20px !important;\n\n\t&:focus, &:focus-visible { \n\t\t& + ${ RadioGroupRadioShape }:before {\n\t\t\topacity: 1;\t\n\t\t}\n\t}\n\t\n\t.yith-plugin-ui &[type=\"radio\"]:checked, .yith-plugin-ui &[type=\"radio\"]:not(:checked){\n\t\tdisplay: block !important;\n\t}\n`;\n\nconst RadioGroupRadioContent = styled( 'div', { name: 'RadioGroup', slot: 'RadioContent' } )`\ncursor: pointer;\n`;\n\nconst RadioGroupRadioLabel = styled( 'div', { name: 'RadioGroup', slot: 'RadioLabel' } )`\nfont-size: inherit;\n`;\nconst RadioGroupRadioDescription = styled( 'div', { name: 'RadioGroup', slot: 'RadioDescription' } )`\n\tfont-size: 0.9em;\n`;\n\nconst RadioGroup = (\n\t{\n\t\toptions = [],\n\t\tvalue: valueProp,\n\t\tcolor: groupColor = 'primary',\n\t\tonChange = noop,\n\t\tname,\n\t\t...other\n\t}: RadioGroupProps\n) => {\n\tconst [ value, setValue ] = useControlledState( valueProp, options[ 0 ].value ?? '' );\n\n\treturn (\n\t\t<RadioGroupRoot direction=\"column\" spacing={ 1 } { ...other }>\n\t\t\t{ options.map( option => {\n\t\t\t\tconst { value: optionValue, label, description, color } = option;\n\t\t\t\tconst isChecked = optionValue === value;\n\t\t\t\tconst ownerState: RadioGroupOptionOwnerState = { isChecked, color: color ?? groupColor };\n\t\t\t\treturn (\n\t\t\t\t\t<RadioGroupItem key={ optionValue }>\n\t\t\t\t\t\t<RadioGroupRadio\n\t\t\t\t\t\t\ttype=\"radio\"\n\t\t\t\t\t\t\tname={ name }\n\t\t\t\t\t\t\tchecked={ isChecked }\n\t\t\t\t\t\t\tvalue={ optionValue }\n\t\t\t\t\t\t\tonChange={ ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\t\t\t\t\t\t\tsetValue( event.target.value );\n\t\t\t\t\t\t\t\tonChange( event, event.target.value );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\townerState={ ownerState }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<RadioGroupRadioShape ownerState={ ownerState }/>\n\t\t\t\t\t\t<RadioGroupRadioContent>\n\t\t\t\t\t\t\t<RadioGroupRadioLabel>{ label }</RadioGroupRadioLabel>\n\t\t\t\t\t\t\t{ !!description && <RadioGroupRadioDescription>{ description }</RadioGroupRadioDescription> }\n\t\t\t\t\t\t</RadioGroupRadioContent>\n\t\t\t\t\t</RadioGroupItem>\n\t\t\t\t);\n\t\t\t} ) }\n\t\t</RadioGroupRoot>\n\t);\n};\n\nexport default RadioGroup;\n","import { keyframes, PaletteClass, styled, SxProps } from '@yith/styles';\nimport React from 'react';\nimport { forwardRef } from 'react';\n\ntype SpinnerOwnerState = {\n\t/**\n\t * The color of the component.\n\t */\n\tcolor: 'inherit' | 'default' | PaletteClass;\n\t/**\n\t * Choose the thickness of the line of the spinner.\n\t */\n\tthickness: number;\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize: number;\n};\ntype SpinnerPropsWithRef = Omit<React.ComponentProps<'span'>, keyof SpinnerOwnerState> & {\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize?: 'sm' | 'md' | 'lg' | 'xl' | number;\n\tsx?: SxProps;\n} & Omit<Partial<SpinnerOwnerState>, 'size'>;\n\ntype SpinnerProps = Omit<SpinnerPropsWithRef, 'ref'>\n\ntype StyledSpinnerProps = { ownerState: SpinnerOwnerState };\n\nconst SVG_SIZE = 44;\n\nconst rotateKeyframe = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dashKeyframe = keyframes`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`;\n\nconst SpinnerRoot = styled( 'span', { name: 'Spinner', slot: 'Root' } )<StyledSpinnerProps>( ( { ownerState, theme } ) => ( {\n\tdisplay: 'inline-flex',\n\tanimation: `${ rotateKeyframe } 1.4s linear infinite`,\n\twidth: ownerState.size,\n\theight: ownerState.size,\n\t...( ownerState.color === 'default' && {\n\t\tcolor: theme.palette.action.active,\n\t} ),\n\t...( ownerState.color !== 'inherit' &&\n\t\townerState.color !== 'default' && {\n\t\t\tcolor: theme.palette[ ownerState.color ].main,\n\t\t} ),\n} ) );\n\nconst SpinnerSvg = styled( 'svg', { name: 'Spinner', slot: 'Svg' } )`\n\tdisplay: block;\n`;\n\nconst SpinnerCircle = styled( 'circle', { name: 'Spinner', slot: 'Circle' } )( () => ( {\n\tstroke: 'currentColor',\n\tstrokeDasharray: '80px, 200px',\n\tstrokeDashoffset: 0,\n\tanimation: `${ dashKeyframe } 1.4s linear infinite`,\n} ) );\n\nconst Spinner = forwardRef<HTMLSpanElement, SpinnerProps>( function Spinner(\n\t{\n\t\tcolor = 'default',\n\t\tthickness = 3.6,\n\t\tsize: sizeProp = 24,\n\t\t...other\n\t},\n\tref\n) {\n\tconst size = typeof sizeProp === 'number' ? sizeProp : { sm: 16, md: 24, lg: 32, xl: 40 }[ sizeProp ] ?? 24;\n\n\tconst ownerState: SpinnerOwnerState = { color, thickness, size };\n\treturn (\n\t\t<SpinnerRoot ownerState={ ownerState } ref={ ref } { ...other }>\n\t\t\t<SpinnerSvg viewBox={ `${ SVG_SIZE / 2 } ${ SVG_SIZE / 2 } ${ SVG_SIZE } ${ SVG_SIZE }` }>\n\t\t\t\t<SpinnerCircle\n\t\t\t\t\tcx={ SVG_SIZE }\n\t\t\t\t\tcy={ SVG_SIZE }\n\t\t\t\t\tr={ ( SVG_SIZE - thickness ) / 2 }\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstrokeWidth={ thickness }\n\t\t\t\t/>\n\t\t\t</SpinnerSvg>\n\t\t</SpinnerRoot>\n\t);\n} );\n\nexport default Spinner;\n","import { alpha, generateComponentClasses, mergeComponentClasses, styled } from \"@yith/styles\";\nimport { ChevronUpDownIcon, XMarkIcon } from \"@heroicons/react/20/solid\";\nimport React, { forwardRef, useMemo, useRef, useState } from \"react\";\n\nimport IconButton from \"../../icon-button\";\nimport { useMergedRefs, useRelatedLabelFocus, ZeroWidthSpace } from \"../../utils\";\nimport Spinner from \"../../spinner\";\nimport type { SelectToggleOwnerState, SelectToggleProps, SelectToggleStyled } from \"../types\";\nimport { useSelectContext } from \"../context\";\nimport { selectClasses } from \"../classes\";\nimport { useDropdown } from \"../../dropdown\";\n\nconst ACTION_SPACING = '6px'; // spacing between actions.\n\nconst useComponentClasses = ( ownerState: SelectToggleOwnerState ) => {\n\tconst stateClasses = generateComponentClasses(\n\t\t'Select',\n\t\t{\n\t\t\ttoggle: [ ownerState.isOpen && 'expanded', ownerState.isFocused && 'focused' ],\n\t\t}\n\t);\n\n\treturn mergeComponentClasses( selectClasses, stateClasses );\n}\n\nconst SelectToggleRoot = styled( 'div', { name: 'Select', slot: 'Toggle' } )<SelectToggleStyled>( ( { theme, ownerState } ) => ( {\n\tboxSizing: 'border-box',\n\tposition: 'relative',\n\tcursor: 'pointer',\n\tuserSelect: 'none',\n\twidth: '100%',\n\tborderRadius: theme.fields.borderRadius,\n\tpadding: theme.fields.padding[ ownerState.size ],\n\tfontSize: theme.fields.fontSize,\n\tlineHeight: 1.5,\n\tcolor: theme.fields.color,\n\t'&:focus, &:focus-visible': {\n\t\toutline: 'none'\n\t},\n\t...( ownerState.variant === 'outlined' && {\n\t\tbackground: theme.fields.background,\n\t\tborderWidth: '1px',\n\t\tborderStyle: 'solid',\n\t\tborderColor: theme.fields.borderColor,\n\t\t...( !ownerState.disabled && {\n\t\t\t'&:focus, &:focus-visible': {\n\t\t\t\tborderColor: theme.fields.focusedBorderColor,\n\t\t\t\tboxShadow: theme.fields.focusedBoxShadow,\n\t\t\t\toutline: 'none'\n\t\t\t}\n\t\t} )\n\t} ),\n\t...( ownerState.variant === 'reveal' && !ownerState.disabled && {\n\t\t'&:hover, &:focus, &:focus-visible': {\n\t\t\tbackground: alpha( theme.palette.primary.main ?? '', theme.palette.action.hoverOpacity ),\n\t\t\toutline: 'none'\n\t\t},\n\t\t...( ownerState.isOpen && ( {\n\t\t\tbackground: alpha( theme.palette.primary.main ?? '', theme.palette.action.hoverOpacity ),\n\t\t\toutline: 'none'\n\t\t} ) ),\n\t} ),\n\t...( ownerState.isOpen && ( {\n\t\tborderColor: theme.fields.focusedBorderColor,\n\t\tboxShadow: theme.fields.focusedBoxShadow\n\t} ) ),\n\t...( ownerState.disabled && {\n\t\tcursor: 'not-allowed'\n\t} )\n} ) );\n\nconst SelectToggleWrap = styled( 'div', { name: 'Select', slot: 'ToggleWrap' } )<SelectToggleStyled>( ( { theme, ownerState } ) => ( {\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tgap: '2px',\n\t...( ownerState.disabled && {\n\t\topacity: theme.palette.action.disabledOpacity\n\t} )\n} ) );\n\nconst SelectToggleLabel = styled( 'span', { name: 'Select', slot: 'ToggleLabel' } )`\n\tflex: 1;\n\tmin-width: 0;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\toverflow: hidden;\n`;\n\nconst SelectTogglePlaceholder = styled( 'span', { name: 'Select', slot: 'TogglePlaceholder' } )( ( { theme } ) => ( {\n\tflex: 1,\n\tminWidth: 0,\n\ttextOverflow: 'ellipsis',\n\twhiteSpace: 'nowrap',\n\toverflow: 'hidden',\n\tcolor: theme.fields.placeholderColor\n} ) );\n\nconst SelectToggleTags = styled( 'div', { name: 'Select', slot: 'ToggleTags' } )`\n\tflex: 1;\n\tdisplay: inline-flex;\n\tflex-wrap: wrap;\n\talign-items: center;\n\tmargin: -5px 0 -5px -9px;\n`;\n\nconst SelectToggleTag = styled( 'div', { name: 'Select', slot: 'ToggleTag' } )( ( { theme } ) => ( {\n\tdisplay: 'inline-flex',\n\talignItems: 'center',\n\tborderRadius: '50px',\n\tbackground: theme.palette.action.selected,\n\tmargin: '4px',\n\theight: '23px',\n} ) );\n\nconst SelectToggleHiddenTagsCount = styled( 'div', { name: 'Select', slot: 'ToggleHiddenTagsCount' } )( () => ( {\n\tmargin: '4px',\n} ) );\n\nconst SelectToggleTagLabel = styled( 'span', { name: 'Select', slot: 'ToggleTagLabel' } )`\n\tpadding: 0 8px 0 12px;\n\tfont-size: 0.9em;\n`;\n\nconst SelectToggleTagRemove = styled( XMarkIcon, { name: 'Select', slot: 'ToggleTagRemove' } )(\n\t( { theme } ) => ( {\n\t\twidth: '1em',\n\t\tfontSize: '17px',\n\t\tborderRadius: '50%',\n\t\tpadding: '2px',\n\t\tmarginRight: '5px',\n\t\tbackground: theme.palette.action.selected,\n\t\tboxSizing: 'border-box',\n\t\t'&:hover': {\n\t\t\tbackground: alpha(\n\t\t\t\ttheme.palette.action.selected!,\n\t\t\t\ttheme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\n\t\t\t),\n\t\t},\n\t} )\n);\n\nconst SelectToggleActions = styled( 'div', { name: 'Select', slot: 'ToggleActions' } )`\n\tdisplay: flex;\n\talign-items: center;\n\tbox-sizing: border-box;\n`;\n\nconst SelectToggleSpinner = styled( 'span', { name: 'Select', slot: 'ToggleSpinner' } )`\n\tdisplay: inline-flex;\n\tmargin-right: ${ ACTION_SPACING };\n`;\n\nconst SelectToggleClear = styled( IconButton, { name: 'Select', slot: 'ToggleClear' } )`\n\tfont-size: 15px;\n\tpadding: 4px;\n\tmargin: -4px;\n\n\t& > svg {\n\t\twidth: 1em;\n\t}\n`;\n\nconst SelectToggleExpand = styled( 'span', { name: 'Select', slot: 'ToggleExpand' } )<SelectToggleStyled>(\n\t( { theme, ownerState } ) => ( {\n\t\tdisplay: 'inline-flex',\n\t\tfontSize: '20px',\n\t\topacity: 0.4,\n\t\tmarginLeft: ACTION_SPACING,\n\t\tmarginRight: -4,\n\t\t...( ownerState.variant === 'reveal' && {\n\t\t\topacity: 0,\n\t\t\t[ `.${ selectClasses.toggle }:hover &, .${ selectClasses.toggle }:focus &, .${ selectClasses.toggle }:focus-visible &` ]: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t} ),\n\t\t...( ownerState.isOpen && {\n\t\t\topacity: 1,\n\t\t\tcolor: theme.fields.focusedBorderColor,\n\t\t} ),\n\t\t'& > svg': {\n\t\t\twidth: '1em',\n\t\t}\n\t} )\n);\n\nconst SelectToggle = forwardRef<HTMLDivElement, SelectToggleProps>(\n\t(\n\t\t{ onClear, ...other }, ref ) => {\n\t\tconst {\n\t\t\tid,\n\t\t\tplaceholder,\n\t\t\tgetOptionId,\n\t\t\tactiveDescendantIndex,\n\t\t\thideToggleIcon,\n\t\t\tsize,\n\t\t\tshowTags,\n\t\t\tisEmpty,\n\t\t\tallowClear,\n\t\t\tlimitTags,\n\t\t\tgetOptionValue,\n\t\t\tgetOptionLabel,\n\t\t\tselectedOptions,\n\t\t\tdeselectOption,\n\t\t\tisLoading,\n\t\t\tvariant,\n\t\t\trenderToggleContent,\n\t\t\tmoveToFirstActiveDescendant,\n\t\t\tmoveToLastActiveDescendant,\n\t\t\tcomponentIds,\n\t\t\tdisabled,\n\t\t\thandleTyping\n\t\t} = useSelectContext();\n\t\tconst { toggle, open, isOpen } = useDropdown();\n\t\tconst label = useMemo( () => selectedOptions.map( getOptionLabel ).join( ', ' ), [ selectedOptions ] );\n\t\tconst rootRef = useRef<HTMLDivElement>( null );\n\t\tconst relatedLabelFocusRef = useRelatedLabelFocus( id );\n\t\tconst mergedRef = useMergedRefs( ref, rootRef, relatedLabelFocusRef );\n\n\t\tconst [ isFocused, setIsFocused ] = useState( false );\n\t\tconst ownerState: SelectToggleOwnerState = {\n\t\t\tisOpen,\n\t\t\tisEmpty,\n\t\t\tisFocused,\n\t\t\tdisabled,\n\t\t\tsize,\n\t\t\tvariant\n\t\t};\n\n\t\tconst handleKeydown = ( event: React.KeyboardEvent<HTMLDivElement> ) => {\n\t\t\tif ( event.target !== rootRef.current || disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch ( event.key ) {\n\t\t\t\tcase 'Down':\n\t\t\t\tcase 'ArrowDown':\n\t\t\t\tcase 'Up':\n\t\t\t\tcase 'ArrowUp':\n\t\t\t\tcase 'Enter':\n\t\t\t\tcase ' ':\n\t\t\t\t\topen();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Home':\n\t\t\t\t\topen();\n\t\t\t\t\tmoveToFirstActiveDescendant();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'End':\n\t\t\t\t\topen();\n\t\t\t\t\tmoveToLastActiveDescendant();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\thandleTyping( event ) && open();\n\t\t\t}\n\t\t};\n\n\t\tconst handleClear = ( e: React.MouseEvent ) => {\n\t\t\te.stopPropagation();\n\t\t\tonClear();\n\t\t\tclose();\n\t\t}\n\n\t\tconst classes = useComponentClasses( ownerState );\n\n\t\tlet display;\n\n\t\tif ( renderToggleContent ) {\n\t\t\tdisplay = renderToggleContent( { isOpen, selectedOptions, deselectOption } );\n\t\t} else {\n\t\t\tdisplay = <SelectToggleLabel className={ classes.toggleLabel }>{ label }</SelectToggleLabel>;\n\t\t\tif ( isEmpty ) {\n\t\t\t\tdisplay = <SelectTogglePlaceholder className={ classes.togglePlaceholder }>{ !!placeholder ? placeholder : <ZeroWidthSpace/> }</SelectTogglePlaceholder>;\n\t\t\t}\n\t\t\tif ( showTags ) {\n\t\t\t\tconst tagsToShow = !isFocused && !isOpen && limitTags > 0 ? selectedOptions.slice( 0, limitTags ) : selectedOptions;\n\t\t\t\tconst hiddenTags = selectedOptions.length - tagsToShow.length;\n\t\t\t\tdisplay = (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{ !!selectedOptions.length ? (\n\t\t\t\t\t\t\t<SelectToggleTags className={ classes.toggleTags }>\n\t\t\t\t\t\t\t\t{ tagsToShow.map( ( option ) => {\n\t\t\t\t\t\t\t\t\tconst tagKey = getOptionValue( option );\n\t\t\t\t\t\t\t\t\tconst tagLabel = getOptionLabel( option );\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<SelectToggleTag key={ tagKey } className={ classes.toggleTag }>\n\t\t\t\t\t\t\t\t\t\t\t<SelectToggleTagLabel className={ classes.toggleTagLabel }>{ tagLabel }</SelectToggleTagLabel>\n\t\t\t\t\t\t\t\t\t\t\t<SelectToggleTagRemove\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={ classes.toggleTagRemove }\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={ ( e: React.MouseEvent ) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectOption( option );\n\t\t\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</SelectToggleTag>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} ) }\n\t\t\t\t\t\t\t\t{ !!hiddenTags && <SelectToggleHiddenTagsCount className={ classes.toggleHiddenTagsCount }>{ ` +${ hiddenTags }` }</SelectToggleHiddenTagsCount> }\n\t\t\t\t\t\t\t</SelectToggleTags>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<SelectTogglePlaceholder className={ classes.togglePlaceholder }>{ !!placeholder ? placeholder : <ZeroWidthSpace/> }</SelectTogglePlaceholder>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<SelectToggleRoot\n\t\t\t\t{ ...other }\n\t\t\t\tclassName={ classes.toggle }\n\t\t\t\tref={ mergedRef }\n\t\t\t\tonFocus={ () => setIsFocused( true ) }\n\t\t\t\tonBlur={ () => setIsFocused( false ) }\n\t\t\t\tonKeyDown={ handleKeydown }\n\t\t\t\tonClick={ !disabled ? toggle : undefined }\n\t\t\t\townerState={ ownerState }\n\t\t\t\taria-controls={ componentIds.listbox }\n\t\t\t\taria-expanded={ isOpen }\n\t\t\t\taria-haspopup=\"listbox\"\n\t\t\t\taria-disabled={ disabled }\n\t\t\t\trole=\"combobox\"\n\t\t\t\ttabIndex={ 0 }\n\t\t\t\taria-activedescendant={ activeDescendantIndex > -1 ? getOptionId( activeDescendantIndex ) : undefined }\n\t\t\t>\n\t\t\t\t<SelectToggleWrap ownerState={ ownerState }>\n\t\t\t\t\t{ !!display ? display : <ZeroWidthSpace/> }\n\n\t\t\t\t\t<SelectToggleActions className={ classes.toggleActions }>\n\t\t\t\t\t\t{ isLoading && (\n\t\t\t\t\t\t\t<SelectToggleSpinner className={ classes.toggleSpinner }>\n\t\t\t\t\t\t\t\t<Spinner size={ 16 }/>\n\t\t\t\t\t\t\t</SelectToggleSpinner>\n\t\t\t\t\t\t) }\n\n\t\t\t\t\t\t{ allowClear && !isEmpty && !showTags && (\n\t\t\t\t\t\t\t<SelectToggleClear\n\t\t\t\t\t\t\t\tclassName={ classes.toggleClear }\n\t\t\t\t\t\t\t\tonClick={ handleClear }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XMarkIcon/>\n\t\t\t\t\t\t\t</SelectToggleClear>\n\t\t\t\t\t\t) }\n\n\t\t\t\t\t\t{ !hideToggleIcon && <SelectToggleExpand className={ classes.toggleExpand } ownerState={ ownerState }>\n\t\t\t\t\t\t\t<ChevronUpDownIcon/>\n\t\t\t\t\t\t</SelectToggleExpand> }\n\t\t\t\t\t</SelectToggleActions>\n\t\t\t\t</SelectToggleWrap>\n\t\t\t</SelectToggleRoot>\n\t\t);\n\t}\n);\n\nexport default SelectToggle;","import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { __ } from '@wordpress/i18n';\nimport { noop } from 'lodash';\nimport { generateComponentClasses, mergeComponentClasses, styled } from '@yith/styles';\n\nimport Dropdown from '../dropdown';\nimport { useControlledState, useId } from '../utils';\n\nimport type { SelectOptionParams, SelectOptionState, SelectOwnerState, SelectOwnProps, SelectProps, SelectStyled, SelectOptionProps } from \"./types\";\nimport { SelectProvider } from \"./context\";\nimport SelectOption from \"./slots/SelectOption\";\nimport SelectToggle from \"./slots/SelectToggle\";\nimport { useSelectDefaultValue } from \"./utils/useSelectDefaultValue\";\nimport { selectClasses } from \"./classes\";\nimport SelectDropdownContent from \"./slots/SelectDropdownContent\";\n\nconst useComponentClasses = ( ownerState: SelectOwnerState ) => {\n\tconst stateClasses = generateComponentClasses(\n\t\t'Select',\n\t\t{\n\t\t\troot: [ `--${ ownerState.variant }` ],\n\t\t}\n\t);\n\n\treturn mergeComponentClasses( selectClasses, stateClasses );\n}\n\nconst SelectRoot = styled( 'div', { name: 'Select', slot: 'Root' } )<SelectStyled>`\n\t${ ( { ownerState } ) => {\n\t\treturn {\n\t\t\twidth: ownerState.width,\n\t\t\tdisplay: 'inline-flex'\n\t\t};\n\t} }\n`;\n\nfunction defaultRenderOptionContent( _option: SelectOptionParams, state: SelectOptionState ) {\n\treturn state.label;\n}\n\nfunction defaultRenderOption( props: SelectOptionProps ) {\n\treturn (\n\t\t<SelectOption { ...props }>\n\t\t\t{ props.children }\n\t\t</SelectOption>\n\t);\n}\n\nconst Select = forwardRef<HTMLDivElement, SelectProps>( function Select(\n\t{\n\t\tvalue: valueProp,\n\t\tid: idProp,\n\t\tname,\n\t\tmultiple = false,\n\t\toptions = [],\n\t\tplaceholder = '',\n\t\tallowClear = false,\n\t\tallowSearch = false,\n\t\tcloseOnSelect: closeOnSelectProp,\n\t\thideSelectedOptions = false,\n\t\tisLoading = false,\n\t\tloadingText = __( 'Loading...', 'yith-plugin-fw' ),\n\t\tnoOptionsText = __( 'No options', 'yith-plugin-fw' ),\n\t\tnoResultsText = __( 'No results', 'yith-plugin-fw' ),\n\t\tonChange = noop,\n\t\tonClear = noop,\n\t\tonClose = noop,\n\t\tonSearch = noop,\n\t\tgetOptionValue = option => option?.value ?? '',\n\t\tgetOptionLabel = option => option?.label ?? '',\n\t\trenderOption = defaultRenderOption,\n\t\trenderOptionContent = defaultRenderOptionContent,\n\t\trenderToggleContent,\n\t\tfilterSearch: filterSearchProp,\n\t\tshowTags = false,\n\t\tlimitTags = 0,\n\t\twidth = 200,\n\t\tsize = 'md',\n\t\tvariant = 'outlined',\n\t\thideToggleIcon = false,\n\t\tdisabled = false,\n\t\t...other\n\t},\n\tref\n) {\n\tconst filterSearch: SelectOwnProps[ 'filterSearch' ] =\n\t\tfilterSearchProp ??\n\t\t( ( option, search ) => getOptionLabel( option ).toLowerCase().indexOf( search.toLowerCase() ) >= 0 );\n\n\tconst id = useId( idProp );\n\tconst defaultValue = useSelectDefaultValue( { multiple, allowClear, getOptionValue, options } );\n\tconst closeOnSelect = typeof closeOnSelectProp === 'undefined' ? ( !multiple ) : closeOnSelectProp;\n\tconst [ value, setValue ] = useControlledState( valueProp, defaultValue );\n\tconst arrayValue = useMemo( () => ( Array.isArray( value ) ? value : [ value ] ).filter( Boolean ), [ value ] );\n\tconst [ searchedTerm, setSearchedTerm ] = useState( '' );\n\tconst toggleRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tif ( allowSearch ) {\n\t\t\tonSearch( searchedTerm );\n\t\t}\n\t}, [ searchedTerm ] );\n\n\tconst deselectOption = useCallback( ( option: SelectOptionParams ) => {\n\t\t\tif ( disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst optionValue = getOptionValue( option );\n\t\t\tif ( multiple ) {\n\t\t\t\tconst idx = ( value as string[] ).findIndex( _ => _ === optionValue );\n\t\t\t\tif ( idx > -1 ) {\n\t\t\t\t\tconst newValue = [ ...( value as string[] ) ];\n\t\t\t\t\tnewValue.splice( idx, 1 );\n\t\t\t\t\tsetValue( newValue );\n\t\t\t\t\tonChange( newValue );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[ getOptionValue, multiple, value, onChange, disabled ]\n\t);\n\n\tconst handleChange = useCallback( ( option: SelectOptionParams ) => {\n\t\t\tif ( disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst optionValue = getOptionValue( option );\n\n\t\t\tallowSearch && setSearchedTerm( '' );\n\n\t\t\tif ( multiple ) {\n\t\t\t\tconst idx = ( value as string[] ).findIndex( _ => _ === optionValue );\n\t\t\t\tif ( idx > -1 ) {\n\t\t\t\t\tconst newValue = [ ...( value as string[] ) ];\n\t\t\t\t\tnewValue.splice( idx, 1 );\n\t\t\t\t\tsetValue( newValue );\n\t\t\t\t\tonChange( newValue );\n\t\t\t\t} else {\n\t\t\t\t\tsetValue( [ ...( value as string[] ), optionValue ] );\n\t\t\t\t\tonChange( [ ...( value as string[] ), optionValue ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetValue( optionValue );\n\t\t\t\tonChange( optionValue );\n\t\t\t}\n\t\t},\n\t\t[ getOptionValue, allowSearch, multiple, onChange, value, closeOnSelect, disabled ]\n\t);\n\n\tconst isOptionSelected = useCallback( ( option: SelectOptionParams ) => {\n\t\t\treturn multiple ? ( value as string[] ).includes( getOptionValue( option ) ) : value === getOptionValue( option )\n\t\t},\n\t\t[ multiple, getOptionValue, value ]\n\t);\n\n\tconst isEmpty = useMemo( () => ( multiple ? !( value as string[] ).length : !value ), [ value, multiple ] );\n\tconst selectedOptions = useMemo( () => options.filter( _ => isOptionSelected( _ ) ), [ options, value, multiple ] );\n\n\tconst filteredOptions = useMemo( () => {\n\t\tlet filtered = options;\n\n\t\tif ( hideSelectedOptions ) {\n\t\t\tfiltered = filtered.filter( option => !isOptionSelected( option ) );\n\t\t}\n\n\t\tif ( allowSearch && searchedTerm ) {\n\t\t\tfiltered = filtered.filter( option => filterSearch( option, searchedTerm ) );\n\t\t}\n\t\treturn filtered;\n\t}, [ searchedTerm, allowSearch, options, hideSelectedOptions, value ] );\n\n\tconst getOptionId = useCallback( ( index: number ) => `${ id }__option__${ index }`, [ id ] );\n\n\tconst defaultActiveDescendantIndex = useMemo( () => filteredOptions.findIndex( _ => isOptionSelected( _ ) ), [ filteredOptions, isOptionSelected ] );\n\tconst [ activeDescendantIndex, setActiveDescendantIndex ] = useState( defaultActiveDescendantIndex );\n\tconst minMaxActiveDescendant = useCallback( ( index: number ) => Math.max( 0, Math.min( filteredOptions.length - 1, index ) ), [ filteredOptions ] );\n\tconst nextActiveDescendant = useCallback( ( increment = 1 ) => setActiveDescendantIndex( _ => minMaxActiveDescendant( _ + increment ) ), [ filteredOptions ] );\n\tconst prevActiveDescendant = useCallback( ( increment = 1 ) => setActiveDescendantIndex( _ => minMaxActiveDescendant( _ - increment ) ), [ filteredOptions ] );\n\tconst moveToFirstActiveDescendant = useCallback( () => setActiveDescendantIndex( filteredOptions.length ? 0 : -1 ), [ filteredOptions ] );\n\tconst moveToLastActiveDescendant = useCallback( () => setActiveDescendantIndex( filteredOptions.length - 1 ), [ filteredOptions ] );\n\tconst unsetActiveDescendant = useCallback( () => setActiveDescendantIndex( -1 ), [] );\n\n\tuseEffect( () => {\n\t\tif ( activeDescendantIndex !== minMaxActiveDescendant( activeDescendantIndex ) ) {\n\t\t\tsetActiveDescendantIndex( minMaxActiveDescendant( activeDescendantIndex ) );\n\t\t}\n\t}, [ activeDescendantIndex, minMaxActiveDescendant ] );\n\n\tconst handleClose = () => {\n\t\tallowSearch && setSearchedTerm( '' );\n\t\tsetActiveDescendantIndex( filteredOptions.findIndex( _ => isOptionSelected( _ ) ) );\n\t\tonClose();\n\t};\n\n\tconst handleClear = () => {\n\t\tonClear();\n\t\tsetValue( multiple ? [] : '' );\n\t};\n\n\tconst [ typingTerm, setTypingTerm ] = useState( '' );\n\tconst typingTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n\tconst handleTyping = useCallback(\n\t\t( event: React.KeyboardEvent<HTMLDivElement> ) => {\n\t\t\tif ( !allowSearch && !disabled ) {\n\t\t\t\tlet stopPropagation = false;\n\n\t\t\t\tif ( event.key === 'Esc' ) {\n\t\t\t\t\tsetTypingTerm( '' );\n\t\t\t\t\tstopPropagation = true;\n\t\t\t\t} else if ( event.key.length === 1 && event.key !== ' ' ) {\n\t\t\t\t\tsetTypingTerm( _ => _ + event.key );\n\t\t\t\t\tstopPropagation = true;\n\t\t\t\t}\n\n\t\t\t\tstopPropagation && event.stopPropagation();\n\t\t\t\treturn stopPropagation;\n\t\t\t}\n\t\t\treturn false;\n\t\t}, [ disabled, allowSearch ] );\n\n\tuseEffect( () => {\n\t\tconst reset = () => setTypingTerm( '' );\n\t\tif ( typingTerm ) {\n\t\t\ttypingTimeout.current && clearTimeout( typingTimeout.current );\n\t\t\ttypingTimeout.current = setTimeout( reset, 500 );\n\t\t}\n\n\t\treturn () => typingTimeout.current && clearTimeout( typingTimeout.current );\n\t}, [ typingTerm ] );\n\n\tuseEffect( () => {\n\t\tif ( typingTerm ) {\n\t\t\tconst orderedOptions = activeDescendantIndex > 0 ? [\n\t\t\t\t...filteredOptions.slice( activeDescendantIndex + 1 ),\n\t\t\t\t...filteredOptions.slice( 0, activeDescendantIndex + 1 ),\n\t\t\t] : [ ...filteredOptions ];\n\t\t\tconst firstMatch = orderedOptions.find( _ => getOptionLabel( _ ).toLowerCase().startsWith( typingTerm.toLowerCase() ) );\n\t\t\tconst letters = typingTerm.split( '' );\n\t\t\tconst allSameLetter = letters.every( ( _ ) => _ === letters[ 0 ] );\n\n\t\t\tif ( firstMatch ) {\n\t\t\t\tsetActiveDescendantIndex( filteredOptions.indexOf( firstMatch ) );\n\t\t\t} else if ( allSameLetter ) {\n\t\t\t\tconst match = orderedOptions.find( _ => getOptionLabel( _ ).toLowerCase().startsWith( typingTerm[ 0 ].toLowerCase() ) );\n\t\t\t\tif ( match ) {\n\t\t\t\t\tsetActiveDescendantIndex( filteredOptions.indexOf( match ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [ typingTerm ] )\n\n\tconst ownerState: SelectOwnerState = { width, variant };\n\tconst classes = useComponentClasses( ownerState );\n\n\tconst componentIds: React.ComponentProps<typeof SelectProvider>['componentIds'] = {\n\t\tlistbox: `${ id }__listbox`,\n\t\toptions: `${ id }__options`,\n\t}\n\n\tconst providerProps: Omit<React.ComponentProps<typeof SelectProvider>, 'children'> = {\n\t\tid,\n\t\tallowClear,\n\t\tallowSearch,\n\t\tplaceholder,\n\t\thideToggleIcon,\n\t\tmultiple,\n\t\tshowTags,\n\t\tlimitTags,\n\t\tgetOptionLabel,\n\t\tgetOptionValue,\n\t\tisLoading,\n\t\tsize,\n\t\tvariant,\n\t\trenderToggleContent,\n\t\tvalue,\n\t\toptions,\n\t\trenderOption,\n\t\trenderOptionContent,\n\t\tnoOptionsText,\n\t\tnoResultsText,\n\t\tloadingText,\n\t\tcloseOnSelect,\n\t\tdisabled,\n\t\tgetOptionId,\n\t\tsearchedTerm,\n\t\tsetSearchedTerm,\n\t\tdeselectOption,\n\t\thandleChange,\n\t\tselectedOptions,\n\t\tfilteredOptions,\n\t\tisOptionSelected,\n\t\tisEmpty,\n\t\tactiveDescendantIndex,\n\t\tsetActiveDescendantIndex,\n\t\tnextActiveDescendant,\n\t\tprevActiveDescendant,\n\t\tunsetActiveDescendant,\n\t\tmoveToFirstActiveDescendant,\n\t\tmoveToLastActiveDescendant,\n\t\tcomponentIds,\n\t\thandleTyping\n\t}\n\n\treturn (\n\t\t<SelectProvider { ...providerProps }>\n\t\t\t<SelectRoot ownerState={ ownerState } { ...other } ref={ ref } id={ id } className={ classes.root }>\n\t\t\t\t{ arrayValue.map( _ => (\n\t\t\t\t\t<input key={ _ } type=\"hidden\" name={ name } value={ _ }/>\n\t\t\t\t) ) }\n\t\t\t\t<Dropdown\n\t\t\t\t\tref={ toggleRef }\n\t\t\t\t\trenderToggle={ () => <SelectToggle onClear={ handleClear }/> }\n\t\t\t\t\trenderContent={ () => <SelectDropdownContent/> }\n\t\t\t\t\tonClose={ handleClose }\n\t\t\t\t\tpopoverProps={ {\n\t\t\t\t\t\tclassName: classes.popover,\n\t\t\t\t\t\tposition: 'bottom left',\n\t\t\t\t\t\tforceMinWidth: true\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</SelectRoot>\n\t\t</SelectProvider>\n\t);\n} );\n\nexport default Select;","import { alpha, generateComponentClasses, styled, keyframes } from '@yith/styles';\nimport React from 'react';\nimport type { SkeletonOwnerState, SkeletonProps, SkeletonStyled } from \"./types\";\nimport classNames from \"classnames\";\n\nconst useComponentClasses = () => {\n\treturn generateComponentClasses(\n\t\t'Skeleton',\n\t\t{\n\t\t\troot: [ 'root' ]\n\t\t}\n\t)\n}\n\nconst pulseAnimation = keyframes`\n  0% {\n    opacity: 1;\n  }\n\n  50% {\n    opacity: 0.4;\n  }\n\n  100% {\n    opacity: 1;\n  }\n`;\n\nconst SkeletonRoot = styled( 'div', { name: 'Skeleton', slot: 'Root' } )<SkeletonStyled>(\n\t( { ownerState, theme } ) => ( {\n\t\tdisplay: 'block',\n\t\tbackgroundColor: alpha( theme.palette.text.primary, theme.mode === 'light' ? 0.11 : 0.13 ),\n\t\theight: ownerState.height,\n\t\twidth: ownerState.width,\n\t\t...( ownerState.variant === 'circular' && {\n\t\t\tborderRadius: '50%',\n\t\t} ),\n\t\t...( ownerState.variant === 'rounded' && {\n\t\t\tborderRadius: theme.shape.borderRadius,\n\t\t} ),\n\t\t...( ownerState.variant === 'text' && {\n\t\t\tmarginTop: 0,\n\t\t\tmarginBottom: 0,\n\t\t\theight: 'auto',\n\t\t\tfontSize: ownerState.fontSize,\n\t\t\tborderRadius: '4px',\n\t\t\t'&:empty:before': {\n\t\t\t\tcontent: '\"\\\\00a0\"',\n\t\t\t},\n\t\t} ),\n\t\t...( ownerState.animation === 'pulse' && {\n\t\t\tanimation: `${ pulseAnimation } 1.5s ease-in-out 0.5s infinite`\n\t\t} )\n\t} )\n);\n\nconst Skeleton = React.forwardRef<HTMLDivElement, SkeletonProps>( function Skeleton(\n\t{\n\t\twidth = 'auto',\n\t\theight = 'auto',\n\t\tfontSize = '1em',\n\t\tvariant = 'text',\n\t\tanimation = 'pulse',\n\t\tclassName,\n\t\t...other\n\t}, ref ) {\n\n\tconst classes = useComponentClasses();\n\n\tconst ownerState: SkeletonOwnerState = { variant, height, width, fontSize, animation };\n\treturn (\n\t\t<SkeletonRoot\n\t\t\t{ ...other }\n\t\t\townerState={ ownerState }\n\t\t\tclassName={ classNames( classes.root, className ) }\n\t\t\tref={ ref }\n\t\t/>\n\t);\n} );\n\nexport default Skeleton;\n","import { noop } from 'lodash';\nimport { forwardRef, useState } from 'react';\n\nimport { styled } from '@yith/styles';\nimport { CheckIcon, XMarkIcon } from \"@heroicons/react/20/solid\";\n\nimport { useControlledState, ZeroWidthSpace } from \"../utils\";\nimport React from 'react';\nimport type { SwitchOwnerState, SwitchProps, SwitchStyled } from \"./types\";\n\nconst SwitchRoot = styled( 'span', { name: 'Switch', slot: 'Root' } )<SwitchStyled>( ( { ownerState, theme } ) => {\n\tconst { size, color, checked, isFocused } = ownerState;\n\tconst background = !checked ? ( 'light' === theme.mode ? theme.palette.grey[ 200 ] : theme.palette.grey[ 600 ] ) : theme.palette[ color ].main;\n\tconst foreground = !checked ? theme.palette.grey[ 500 ] : theme.palette[ color ].main;\n\tconst focusedShadowColor = theme.palette[ color ].main;\n\n\treturn {\n\t\tdisplay: 'inline-block',\n\t\tcursor: 'pointer',\n\t\tposition: 'relative',\n\t\ttransition: 'all 0.3s',\n\t\tboxSizing: 'border-box',\n\t\tuserSelect: 'none',\n\t\tbackground: background,\n\t\tcolor: foreground,\n\t\twidth: 44,\n\t\theight: 24,\n\t\tborderRadius: 24,\n\t\tlineHeight: '20px',\n\t\tborder: '2px solid #0000',\n\t\tboxShadow: '0 0 0 0 rgba(0,0,0,0)',\n\t\t...( size === 'sm' && {\n\t\t\twidth: 36,\n\t\t\theight: 20,\n\t\t\tborderRadius: 20,\n\t\t\tlineHeight: '16px',\n\t\t} ),\n\t\t...( size === 'lg' && {\n\t\t\twidth: 52,\n\t\t\theight: 28,\n\t\t\tborderRadius: 28,\n\t\t\tlineHeight: '24px',\n\t\t} ),\n\t\t...( size === 'xl' && {\n\t\t\twidth: 60,\n\t\t\theight: 32,\n\t\t\tborderRadius: 32,\n\t\t\tlineHeight: '28px',\n\t\t} ),\n\t\t...( isFocused && {\n\t\t\tboxShadow: `0 0 0px 2px ${ theme.palette.background.default }, 0 0 0px 4px ${ focusedShadowColor }`\n\t\t} ),\n\t\t...( ownerState.disabled && {\n\t\t\topacity: theme.palette.action.disabledOpacity,\n\t\t\tcursor: 'not-allowed'\n\t\t} )\n\t}\n} );\nconst SwitchField = styled( 'input', { name: 'Switch', slot: 'Field' } )`\n\tposition: absolute !important;\n\topacity: 0 !important;\n\tmargin: 0 !important;\n\tpadding: 0 !important;\n\tleft: 0 !important;\n\ttop: 0 !important;\n\twidth: 100% !important;\n\theight: 100% !important;\n\tcursor: inherit !important;\n\tz-index: 1 !important;\n`;\nconst SwitchThumb = styled( 'span', { name: 'Switch', slot: 'Thumb' } )<SwitchStyled>( ( { ownerState } ) => ( {\n\tbackground: '#fff',\n\tborderRadius: '50%',\n\tposition: 'absolute',\n\ttransition: 'all 0.2s cubic-bezier(.4,0,.2,1)',\n\tboxSizing: 'border-box',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'center',\n\tfontSize: '10px',\n\twidth: 20,\n\theight: 20,\n\ttop: 0,\n\tleft: !ownerState.checked ? 0 : 20,\n\tboxShadow: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)',\n\t...( ownerState.size === 'sm' && {\n\t\twidth: 16,\n\t\theight: 16,\n\t\tleft: !ownerState.checked ? 0 : 16,\n\t\tfontSize: '8px',\n\t} ),\n\t...( ownerState.size === 'lg' && {\n\t\twidth: 24,\n\t\theight: 24,\n\t\tleft: !ownerState.checked ? 0 : 24,\n\t\tfontSize: '12px',\n\t} ),\n\t...( ownerState.size === 'xl' && {\n\t\twidth: 28,\n\t\theight: 28,\n\t\ttop: 0,\n\t\tleft: !ownerState.checked ? 0 : 28,\n\t\tfontSize: '14px',\n\t} ),\n\t'& > svg': {\n\t\twidth: '1em',\n\t\tstrokeWidth: 2,\n\t\tstroke: 'currentColor'\n\t}\n} ) );\n\nconst Switch = forwardRef<HTMLInputElement, SwitchProps>( function Switch(\n\t{\n\t\ttype = 'checkbox',\n\t\tcolor = 'primary',\n\t\tchecked: checkedProp,\n\t\tdisabled = false,\n\t\tonChange = noop,\n\t\tclassName,\n\t\tname,\n\t\tonFocus = noop,\n\t\tonBlur = noop,\n\t\tsize = 'md',\n\t\t...other\n\t}: SwitchProps,\n\tref\n) {\n\tconst [ isChecked, setIsChecked ] = useControlledState( checkedProp, false );\n\tconst [ isFocused, setIsFocused ] = useState( false );\n\n\tconst handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\tif ( disabled ) {\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( event.nativeEvent.defaultPrevented ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newChecked = event.target.checked;\n\t\tsetIsChecked( newChecked );\n\n\t\tonChange( event, newChecked );\n\t};\n\n\tconst handleFocus = ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\tsetIsFocused( true );\n\t\tonFocus( e );\n\t};\n\n\tconst handleBlur = ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\tsetIsFocused( false );\n\t\tonBlur( e );\n\t};\n\n\tconst ownerState: SwitchOwnerState = {\n\t\tchecked: isChecked,\n\t\tdisabled,\n\t\tisFocused,\n\t\tcolor,\n\t\tsize\n\t};\n\n\tconst IconComponent = isChecked ? CheckIcon : XMarkIcon;\n\n\treturn (\n\t\t<SwitchRoot\n\t\t\tclassName={ className }\n\t\t\townerState={ ownerState }\n\t\t>\n\t\t\t<SwitchField\n\t\t\t\tref={ ref }\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tchecked={ isChecked }\n\t\t\t\t{ ...other }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\tonFocus={ handleFocus }\n\t\t\t\tonBlur={ handleBlur }\n\t\t\t\treadOnly\n\t\t\t\trole=\"switch\"\n\t\t\t\ttabIndex={ 0 }\n\t\t\t\taria-checked={ isChecked }\n\t\t\t\tname={ 'checkbox' === type ? name : '' }\n\t\t\t\tdisabled={ disabled }\n\t\t\t/>\n\t\t\t{ 'hidden' === type && <input type=\"hidden\" value={ isChecked ? 'yes' : 'no' } name={ name }/> }\n\t\t\t<SwitchThumb ownerState={ ownerState }>\n\t\t\t\t<IconComponent/>\n\t\t\t</SwitchThumb>\n\t\t\t<ZeroWidthSpace/>\n\t\t</SwitchRoot>\n\t);\n} );\n\nexport default Switch;\n","import { styled } from '@yith/styles';\nimport { noop, range } from 'lodash';\nimport React, { useMemo, useState } from 'react';\nimport Select from '../select';\n\ntype Time = {\n\thours: number;\n\tminutes: number;\n\thoursVal: string;\n\tminutesVal: string;\n\tvalue: string;\n};\n\ntype TimeSelectorProps = Omit<React.ComponentProps<'input'>, 'onChange' | 'value'> & {\n\tvalue?: string;\n\tonChange?: ( ( value: string ) => void ) | React.Dispatch<React.SetStateAction<string>>;\n\tminutesStep?: number;\n};\n\nconst TimeSelectorRoot = styled( 'div', { name: 'TimeSelector', slot: 'Root' } )`\n\tdisplay: flex;\n\talign-items: baseline;\n`;\n\nconst TimeSelectorSeparator = styled( 'span', { name: 'TimeSelector', slot: 'Separator' } )`\n\tmargin: 0 5px;\n`;\n\nconst getHours = ( value: string | number ): number => {\n\tlet hours = typeof value === 'number' ? value : parseInt( value, 10 );\n\thours = Math.min( 23, hours );\n\thours = Math.max( 0, hours );\n\treturn hours;\n};\n\nconst getMinutes = ( value: string | number ): number => {\n\tlet minutes = typeof value === 'number' ? value : parseInt( value, 10 );\n\tminutes = Math.min( 59, minutes );\n\tminutes = Math.max( 0, minutes );\n\treturn minutes;\n};\n\nconst getTime = ( hours: string | number, minutes: string | number ): Time => {\n\thours = getHours( hours );\n\tminutes = getMinutes( minutes );\n\n\treturn {\n\t\thours,\n\t\tminutes,\n\t\thoursVal: formatSingle( hours ),\n\t\tminutesVal: formatSingle( minutes ),\n\t\tvalue: `${ formatSingle( hours ) }:${ formatSingle( minutes ) }`,\n\t};\n};\n\nconst getTimeFromString = ( time: string ): Time => {\n\tconst [ h = 0, m = 0 ] = time.split( ':' );\n\tconst hours = getHours( h );\n\tconst minutes = getMinutes( m );\n\n\treturn getTime( hours, minutes );\n};\n\nconst formatSingle = ( number: number ) => ( number > 9 ? number.toString() : `0${ number }` );\n\nconst HOURS = range( 24 )\n\t.map( formatSingle )\n\t.map( _ => ( { value: _, label: _ } ) );\n\nconst TimeSelector = React.forwardRef<HTMLInputElement, TimeSelectorProps>( function TimeSelector(\n\t{\n\t\tvalue = '00:00',\n\t\tonChange = noop,\n\t\tminutesStep = 1,\n\t\t...other\n\t},\n\tref\n) {\n\tconst minutesOptions = useMemo(\n\t\t() =>\n\t\t\trange( 0, 60, minutesStep )\n\t\t\t\t.map( formatSingle )\n\t\t\t\t.map( _ => ( { value: _, label: _ } ) ),\n\t\t[ minutesStep ]\n\t);\n\tconst timeProp = useMemo( () => getTimeFromString( value ), [ value ] );\n\tconst [ hours, setHours ] = useState( timeProp.hoursVal );\n\tconst [ minutes, setMinutes ] = useState( timeProp.minutesVal );\n\tconst time = useMemo( () => getTime( hours, minutes ), [ hours, minutes ] );\n\n\treturn (\n\t\t<TimeSelectorRoot>\n\t\t\t<input { ...other } type=\"hidden\" value={ time.value } ref={ ref }/>\n\t\t\t<Select value={ hours } onChange={ ( _: string ) => setHours( _ ) } options={ HOURS } width={ 75 }/>\n\t\t\t<TimeSelectorSeparator>:</TimeSelectorSeparator>\n\t\t\t<Select value={ minutes } onChange={ ( _: string ) => setMinutes( _ ) } options={ minutesOptions } width={ 75 }/>\n\t\t</TimeSelectorRoot>\n\t);\n} );\n\nexport default TimeSelector;\n"],"names":[],"sourceRoot":""}