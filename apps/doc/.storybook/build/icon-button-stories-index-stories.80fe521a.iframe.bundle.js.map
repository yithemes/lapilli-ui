{"version":3,"file":"icon-button-stories-index-stories.80fe521a.iframe.bundle.js","mappings":";;AAeA;AAeA;ACKA;AAqEA","sources":["webpack://yith-components-doc/../../packages/components/src/container/Container.tsx","webpack://yith-components-doc/../../packages/components/src/icon-button/IconButton.tsx"],"sourcesContent":["import { Breakpoint, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype ContainerProps = React.ComponentProps<'div'> & {\n\tmaxWidth?: false | Breakpoint | number;\n\tsx?: SxProps;\n};\n\ntype ContainerOwnserState = {\n\tmaxWidth: false | Breakpoint | number;\n};\n\ntype StyledContainerProps = { ownerState: ContainerOwnserState };\n\nconst ContainerRoot = styled( 'div', { name: 'Container', slot: 'Root' } )<StyledContainerProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { maxWidth } = ownerState;\n\tconst style: any = {};\n\n\tif ( maxWidth !== false ) {\n\t\tif ( typeof maxWidth === 'string' && typeof theme.breakpoints.values[ maxWidth ] !== 'undefined' ) {\n\t\t\tstyle.maxWidth = theme.breakpoints.values[ maxWidth ] + theme.breakpoints.unit;\n\t\t} else {\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\treturn style;\n} }\n`;\n\nconst Container = forwardRef<HTMLDivElement, ContainerProps>( function Container(\n\t{ children, maxWidth = false, ...props },\n\tref\n) {\n\tconst ownerState: ContainerOwnserState = { maxWidth };\n\n\treturn (\n\t\t<ContainerRoot { ...props } ownerState={ ownerState } ref={ ref }>\n\t\t\t{ children }\n\t\t</ContainerRoot>\n\t);\n} );\n\nexport default Container;\n","import { alpha, FieldSize, PaletteClass, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype IconButtonOwnerState = {\n\t/**\n\t * The color of the icon button.\n\t */\n\tcolor: 'default' | 'inherit' | PaletteClass;\n\t/**\n\t * Set the variant to change the style of the icon button.\n\t */\n\tvariant: 'ghost' | 'shadowed';\n\t/**\n\t * The size.\n\t */\n\tsize: FieldSize;\n\t/**\n\t * The font size.\n\t */\n\tfontSize?: FieldSize | React.CSSProperties['fontSize'];\n\t/**\n\t * Sx props.\n\t */\n\tsx?: SxProps\n}\n\ntype IconButtonOwnProps = Partial<IconButtonOwnerState>;\ntype IconButtonPropsWithRef = Omit<React.ComponentProps<'button'>, keyof IconButtonOwnProps> & IconButtonOwnProps;\ntype IconButtonProps = Omit<IconButtonPropsWithRef, 'ref'>;\n\ntype StyledIconButtonProps = {\n\townerState: IconButtonOwnerState;\n};\n\nconst IconButtonRoot = styled( 'button', { name: 'IconButton', slot: 'Root' } )<StyledIconButtonProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { color, variant, size } = ownerState;\n\n\tlet mainColor = theme.palette.action.active;\n\tif ( color !== 'default' && color !== 'inherit' ) {\n\t\tmainColor = theme.palette[ color ].main;\n\t}\n\n\tconst padding = {\n\t\tsm: 9,\n\t\tmd: 12,\n\t\tlg: 15,\n\t\txl: 18,\n\t}[ size ];\n\n\n\tconst fontSizeMapping = {\n\t\tsm: 14,\n\t\tmd: 16,\n\t\tlg: 18,\n\t\txl: 20,\n\t};\n\tconst fontSize = fontSizeMapping[ ownerState.fontSize as FieldSize ] ?? ownerState.fontSize ?? fontSizeMapping[ size ];\n\n\treturn {\n\t\ttextAlign: 'center',\n\t\tflex: '0 0 auto',\n\t\tfontSize: fontSize,\n\t\tpadding: padding,\n\t\tborder: 0,\n\t\tborderRadius: '50%',\n\t\tcursor: 'pointer',\n\t\tlineHeight: 0,\n\t\tcolor: 'inherit' !== color ? mainColor : color,\n\t\tbackground: 'transparent',\n\t\tboxShadow: `0 0 0 8px ${ alpha( mainColor, 0 ) }`,\n\t\ttransition: 'background .3s ease-in-out, box-shadow .3s ease-in-out',\n\t\t'&:disabled': {\n\t\t\tpointerEvents: 'none',\n\t\t\topacity: theme.palette.action.disabledOpacity\n\t\t},\n\t\t...( variant === 'ghost' && {\n\t\t\t'&:hover': {\n\t\t\t\tbackground: alpha( mainColor, theme.palette.action.hoverOpacity ),\n\t\t\t\tboxShadow: `0 0 0 0px ${ alpha( mainColor, theme.palette.action.hoverOpacity ) }`,\n\t\t\t},\n\t\t\t'&:focus-visible': {\n\t\t\t\tborder: 0,\n\t\t\t\toutline: 0,\n\t\t\t\tboxShadow: '0 0 0 3px ' + alpha( mainColor, theme.palette.action.focusOpacity ),\n\t\t\t},\n\t\t} ),\n\t\t...( variant === 'shadowed' && {\n\t\t\tbackground: theme.palette.background.default,\n\t\t\tboxShadow: `0 2px 7px 0 rgba(170,198,222, .5)`,\n\t\t\t'&:hover': {\n\t\t\t\tboxShadow: `0 3px 10px 0 rgba(170,198,222, .6)`,\n\t\t\t},\n\t\t\t'&:focus-visible': {\n\t\t\t\tborder: 0,\n\t\t\t\toutline: 0,\n\t\t\t\tboxShadow: '0 3px 12px 0 rgba(170,198,222, .6), 0 0 0 3px rgba(170,198,222, .2)',\n\t\t\t},\n\t\t} ),\n\n\t};\n} }\n`;\n\nconst IconButton = forwardRef<HTMLButtonElement, IconButtonProps>( function IconButton(\n\t{\n\t\ttype = 'button',\n\t\tcolor = 'default',\n\t\tvariant = 'ghost',\n\t\tsize = 'md',\n\t\tfontSize,\n\t\tchildren,\n\t\t...other\n\t},\n\tref ) {\n\tconst ownerState: IconButtonOwnerState = { color, variant, size, fontSize };\n\treturn (\n\t\t<IconButtonRoot type={ type } ref={ ref } ownerState={ ownerState } { ...other }>\n\t\t\t{ children }\n\t\t</IconButtonRoot>\n\t);\n} );\n\nexport default IconButton;\n"],"names":[],"sourceRoot":""}