{"version":3,"file":"636.4d3deeb6.iframe.bundle.js","mappings":";;;;;;;;;AAuHA;AA+BA;;;;;AAKA;AAUA;;;;;;AC7EA;;;;;;AAiBA;;;AAkBA;;;;AAwBA;;AAvIA;AA4IA;;;;;;;;AAUA;ACtIA;AAQA;;;;;;;;ACMA;;;;;;;;;;;;;;;AAiBA;;AAkBA","sources":["webpack://yith-components-doc/../../packages/components/src/input/Input.tsx","webpack://yith-components-doc/../../packages/components/src/select/slots/SelectToggle.tsx","webpack://yith-components-doc/../../packages/components/src/select/Select.tsx","webpack://yith-components-doc/../../packages/components/src/spinner/Spinner.tsx"],"sourcesContent":["import { styled } from '@yith/styles';\nimport { noop } from 'lodash';\nimport React from 'react';\nimport { forwardRef, useState } from 'react';\nimport type { InputOwnerState, InputProps, InputStyled } from \"./types\";\n\nconst splitPadding = ( padding: React.CSSProperties[ 'padding' ] ) => {\n\tconst sPadding = padding?.toString().split( ' ' );\n\tconst length = sPadding?.length;\n\n\tif ( !length ) {\n\t\treturn {\n\t\t\ttop: 0,\n\t\t\tright: 0,\n\t\t\tbottom: 0,\n\t\t\tleft: 0,\n\t\t};\n\t}\n\n\treturn {\n\t\ttop: sPadding[ 0 ],\n\t\tright: sPadding[ 1 ] ?? sPadding[ 0 ],\n\t\tbottom: sPadding[ 2 ] ?? sPadding[ 0 ],\n\t\tleft: sPadding[ 3 ] ?? sPadding[ 1 ] ?? sPadding[ 0 ],\n\t};\n};\n\nconst RESET_STYLES: React.CSSProperties = {\n\t// @ts-ignore\n\tappearance: 'none !important',\n\tdisplay: 'block !important',\n\twidth: '100% !important',\n\tminWidth: '0 !important',\n\tbackgroundColor: 'transparent !important',\n\t// @ts-ignore\n\tboxSizing: 'border-box !important',\n\tborder: '1px solid transparent !important',\n\tcolor: 'inherit !important',\n\tfontFamily: 'inherit !important',\n\tmargin: '0 !important',\n\toutline: 'none !important',\n\theight: 'auto !important',\n\tlineHeight: '1.5em !important',\n\tboxShadow: 'none !important'\n};\n\nconst InputRoot = styled( 'div', {\n\tname: 'Input',\n\tslot: 'Root',\n} )<InputStyled>( ( { theme, ownerState } ) => {\n\tconst { isMini, hasStartAdornment, hasEndAdornment, fullWidth } = ownerState;\n\tconst style: React.CSSProperties = {\n\t\tborderRadius: theme.fields.borderRadius,\n\t\tfontSize: theme.fields.fontSize,\n\t\tbackground: 'transparent',\n\t\tcolor: theme.fields.color,\n\t\twidth: !isMini && fullWidth ? '100%' : 'fit-content',\n\t\tflex: !isMini && fullWidth ? '1 1 0%' : '0 1 0%',\n\t};\n\tconst padding = splitPadding( theme.fields.padding[ ownerState.size ] );\n\n\tif ( hasStartAdornment ) {\n\t\tstyle.paddingLeft = padding.left;\n\t}\n\tif ( hasEndAdornment ) {\n\t\tstyle.paddingRight = padding.right;\n\t}\n\n\treturn {\n\t\tdisplay: 'inline-flex',\n\t\talignItems: 'center',\n\t\tboxSizing: 'border-box',\n\t\tposition: 'relative',\n\t\tzIndex: 1,\n\t\t...style\n\t}\n} );\n\nconst InputField = styled( 'input', {\n\tname: 'Input',\n\tslot: 'Field',\n} )<InputStyled>( ( { theme, ownerState } ) => {\n\tconst { isMini, hasStartAdornment, hasEndAdornment, fullWidth } = ownerState;\n\tconst padding = splitPadding( theme.fields.padding[ ownerState.size ] );\n\n\tif ( hasStartAdornment ) {\n\t\tpadding.left = '0px';\n\t}\n\tif ( hasEndAdornment ) {\n\t\tpadding.right = '0px';\n\t}\n\n\tconst paddingProp = `${ padding.top } ${ padding.right } ${ padding.bottom } ${ padding.left }`;\n\n\tconst minWidth = `calc(60px + ${ padding.right } + ${ padding.left })`;\n\n\treturn {\n\t\t...RESET_STYLES,\n\t\tpadding: paddingProp + ' !important',\n\t\tfontSize: 'inherit' + ' !important',\n\t\twidth: ( !isMini ? ( fullWidth ? '100%' : 'auto' ) : minWidth ) + ' !important',\n\t\t'&::placeholder': {\n\t\t\tcolor: theme.fields.placeholderColor\n\t\t},\n\t\t...( ownerState.disabled && {\n\t\t\topacity: theme.palette.action.disabledOpacity,\n\t\t} )\n\t};\n} );\n\nconst InputBackdrop = styled( 'div', { name: 'Input', slot: 'Backdrop' } )<InputStyled>`\n\tbox-sizing: border-box;\n\tborder-radius: inherit;\n\tinset: 0px;\n\tmargin: 0px;\n\tpadding: 0px;\n\tpointer-events: none;\n\tposition: absolute;\n\n\t${ ( { theme, ownerState } ) => {\n\t\tconst { isFocused, variant } = ownerState;\n\n\t\tconst style: React.CSSProperties = {\n\t\t\tbackground: theme.fields.background,\n\t\t\tborderColor: theme.fields.borderColor,\n\t\t\tfontSize: theme.fields.fontSize,\n\t\t\tzIndex: -1\n\t\t};\n\n\t\tconst variantStyles = {\n\t\t\toutlined: {\n\t\t\t\tborderStyle: 'solid',\n\t\t\t\tborderWidth: '1px',\n\t\t\t\tborderColor: theme.fields.borderColor,\n\t\t\t\t...( isFocused && {\n\t\t\t\t\tborderColor: theme.fields.focusedBorderColor,\n\t\t\t\t\tboxShadow: theme.fields.focusedBoxShadow,\n\t\t\t\t} ),\n\t\t\t},\n\t\t\tghost: {},\n\t\t}[ variant ];\n\n\t\treturn { ...style, ...variantStyles };\n\t} }\n`;\n\ntype InputAdornmentOwnerState = {\n\tposition: 'start' | 'end';\n};\n\nconst InputAdornment = styled( 'div', { name: 'Input', slot: 'Adornment' } )<{ ownerState: InputAdornmentOwnerState }>`\n\tdisplay: flex;\n\talign-items: center;\n\theight: 0.01em;\n\twhite-space: nowrap;\n\t${ ( { theme, ownerState } ) => {\n\t\tconst { position } = ownerState;\n\n\t\treturn {\n\t\t\t[ `margin${ 'start' === position ? 'Right' : 'Left' }` ]: '14px',\n\t\t\tcolor: theme.palette.action.active,\n\t\t};\n\t} }\n`;\n\nconst Input = forwardRef<HTMLInputElement, InputProps>( function Input(\n\t{\n\t\ttype = 'text',\n\t\tvalue,\n\t\tvariant = 'outlined',\n\t\tonChange = noop,\n\t\tonFocus = noop,\n\t\tonBlur = noop,\n\t\tstartAdornment,\n\t\tendAdornment,\n\t\tisMini = false,\n\t\tfullWidth = false,\n\t\tdisabled = false,\n\t\tsize = 'md',\n\t\t...other\n\t},\n\tref\n) {\n\tconst [ isFocused, setIsFocused ] = useState( false );\n\n\tconst handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\tif ( event.nativeEvent.defaultPrevented || disabled ) {\n\t\t\treturn;\n\t\t}\n\t\tconst newValue = event.target.value ?? '';\n\t\tonChange( event, newValue );\n\t};\n\n\tconst ownerState: InputOwnerState = {\n\t\tvariant,\n\t\tsize,\n\t\tisFocused,\n\t\tisMini,\n\t\tfullWidth,\n\t\tdisabled,\n\t\thasStartAdornment: !!startAdornment,\n\t\thasEndAdornment: !!endAdornment,\n\t};\n\n\treturn (\n\t\t<InputRoot ownerState={ ownerState }>\n\t\t\t{ !!startAdornment && <InputAdornment ownerState={ { position: 'start' } }>{ startAdornment }</InputAdornment> }\n\t\t\t<InputField\n\t\t\t\tref={ ref }\n\t\t\t\ttype={ type }\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\tonFocus={ ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\t\t\t\tsetIsFocused( true );\n\t\t\t\t\tonFocus( e );\n\t\t\t\t} }\n\t\t\t\tonBlur={ ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\t\t\t\tsetIsFocused( false );\n\t\t\t\t\tonFocus( e );\n\t\t\t\t} }\n\t\t\t\tautoComplete=\"off\"\n\t\t\t\townerState={ ownerState }\n\t\t\t\tdisabled={ disabled }\n\t\t\t\t{ ...other }\n\t\t\t/>\n\t\t\t{ !!endAdornment && <InputAdornment ownerState={ { position: 'end' } }>{ endAdornment }</InputAdornment> }\n\t\t\t<InputBackdrop ownerState={ ownerState }/>\n\t\t</InputRoot>\n\t);\n} );\n\n\nexport default Input;\n","import { alpha, generateComponentClasses, mergeComponentClasses, styled } from \"@yith/styles\";\nimport { ChevronUpDownIcon, XMarkIcon } from \"@heroicons/react/20/solid\";\nimport React, { forwardRef, useMemo, useRef, useState } from \"react\";\n\nimport IconButton from \"../../icon-button\";\nimport { useMergedRefs, useRelatedLabelFocus, ZeroWidthSpace } from \"../../utils\";\nimport Spinner from \"../../spinner\";\nimport type { SelectToggleOwnerState, SelectToggleProps, SelectToggleStyled } from \"../types\";\nimport { useSelectContext } from \"../context\";\nimport { selectClasses } from \"../classes\";\nimport { useDropdown } from \"../../dropdown\";\n\nconst ACTION_SPACING = '6px'; // spacing between actions.\n\nconst useComponentClasses = ( ownerState: SelectToggleOwnerState ) => {\n\tconst stateClasses = generateComponentClasses(\n\t\t'Select',\n\t\t{\n\t\t\ttoggle: [ ownerState.isOpen && 'expanded', ownerState.isFocused && 'focused' ],\n\t\t}\n\t);\n\n\treturn mergeComponentClasses( selectClasses, stateClasses );\n}\n\nconst SelectToggleRoot = styled( 'div', { name: 'Select', slot: 'Toggle' } )<SelectToggleStyled>( ( { theme, ownerState } ) => ( {\n\tboxSizing: 'border-box',\n\tposition: 'relative',\n\tcursor: 'pointer',\n\tuserSelect: 'none',\n\twidth: '100%',\n\tborderRadius: theme.fields.borderRadius,\n\tpadding: theme.fields.padding[ ownerState.size ],\n\tfontSize: theme.fields.fontSize,\n\tlineHeight: 1.5,\n\tcolor: theme.fields.color,\n\t'&:focus, &:focus-visible': {\n\t\toutline: 'none'\n\t},\n\t...( ownerState.variant === 'outlined' && {\n\t\tbackground: theme.fields.background,\n\t\tborderWidth: '1px',\n\t\tborderStyle: 'solid',\n\t\tborderColor: theme.fields.borderColor,\n\t\t...( !ownerState.disabled && {\n\t\t\t'&:focus, &:focus-visible': {\n\t\t\t\tborderColor: theme.fields.focusedBorderColor,\n\t\t\t\tboxShadow: theme.fields.focusedBoxShadow,\n\t\t\t\toutline: 'none'\n\t\t\t}\n\t\t} )\n\t} ),\n\t...( ownerState.variant === 'reveal' && !ownerState.disabled && {\n\t\t'&:hover, &:focus, &:focus-visible': {\n\t\t\tbackground: alpha( theme.palette.primary.main ?? '', theme.palette.action.hoverOpacity ),\n\t\t\toutline: 'none'\n\t\t},\n\t\t...( ownerState.isOpen && ( {\n\t\t\tbackground: alpha( theme.palette.primary.main ?? '', theme.palette.action.hoverOpacity ),\n\t\t\toutline: 'none'\n\t\t} ) ),\n\t} ),\n\t...( ownerState.isOpen && ( {\n\t\tborderColor: theme.fields.focusedBorderColor,\n\t\tboxShadow: theme.fields.focusedBoxShadow\n\t} ) ),\n\t...( ownerState.disabled && {\n\t\tcursor: 'not-allowed'\n\t} )\n} ) );\n\nconst SelectToggleWrap = styled( 'div', { name: 'Select', slot: 'ToggleWrap' } )<SelectToggleStyled>( ( { theme, ownerState } ) => ( {\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tgap: '2px',\n\t...( ownerState.disabled && {\n\t\topacity: theme.palette.action.disabledOpacity\n\t} )\n} ) );\n\nconst SelectToggleLabel = styled( 'span', { name: 'Select', slot: 'ToggleLabel' } )`\n\tflex: 1;\n\tmin-width: 0;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\toverflow: hidden;\n`;\n\nconst SelectTogglePlaceholder = styled( 'span', { name: 'Select', slot: 'TogglePlaceholder' } )( ( { theme } ) => ( {\n\tflex: 1,\n\tminWidth: 0,\n\ttextOverflow: 'ellipsis',\n\twhiteSpace: 'nowrap',\n\toverflow: 'hidden',\n\tcolor: theme.fields.placeholderColor\n} ) );\n\nconst SelectToggleTags = styled( 'div', { name: 'Select', slot: 'ToggleTags' } )`\n\tflex: 1;\n\tdisplay: inline-flex;\n\tflex-wrap: wrap;\n\talign-items: center;\n\tmargin: -5px 0 -5px -9px;\n`;\n\nconst SelectToggleTag = styled( 'div', { name: 'Select', slot: 'ToggleTag' } )( ( { theme } ) => ( {\n\tdisplay: 'inline-flex',\n\talignItems: 'center',\n\tborderRadius: '50px',\n\tbackground: theme.palette.action.selected,\n\tmargin: '4px',\n\theight: '23px',\n} ) );\n\nconst SelectToggleHiddenTagsCount = styled( 'div', { name: 'Select', slot: 'ToggleHiddenTagsCount' } )( () => ( {\n\tmargin: '4px',\n} ) );\n\nconst SelectToggleTagLabel = styled( 'span', { name: 'Select', slot: 'ToggleTagLabel' } )`\n\tpadding: 0 8px 0 12px;\n\tfont-size: 0.9em;\n`;\n\nconst SelectToggleTagRemove = styled( XMarkIcon, { name: 'Select', slot: 'ToggleTagRemove' } )(\n\t( { theme } ) => ( {\n\t\twidth: '1em',\n\t\tfontSize: '17px',\n\t\tborderRadius: '50%',\n\t\tpadding: '2px',\n\t\tmarginRight: '5px',\n\t\tbackground: theme.palette.action.selected,\n\t\tboxSizing: 'border-box',\n\t\t'&:hover': {\n\t\t\tbackground: alpha(\n\t\t\t\ttheme.palette.action.selected!,\n\t\t\t\ttheme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity\n\t\t\t),\n\t\t},\n\t} )\n);\n\nconst SelectToggleActions = styled( 'div', { name: 'Select', slot: 'ToggleActions' } )`\n\tdisplay: flex;\n\talign-items: center;\n\tbox-sizing: border-box;\n`;\n\nconst SelectToggleSpinner = styled( 'span', { name: 'Select', slot: 'ToggleSpinner' } )`\n\tdisplay: inline-flex;\n\tmargin-right: ${ ACTION_SPACING };\n`;\n\nconst SelectToggleClear = styled( IconButton, { name: 'Select', slot: 'ToggleClear' } )`\n\tfont-size: 15px;\n\tpadding: 4px;\n\tmargin: -4px;\n\n\t& > svg {\n\t\twidth: 1em;\n\t}\n`;\n\nconst SelectToggleExpand = styled( 'span', { name: 'Select', slot: 'ToggleExpand' } )<SelectToggleStyled>(\n\t( { theme, ownerState } ) => ( {\n\t\tdisplay: 'inline-flex',\n\t\tfontSize: '20px',\n\t\topacity: 0.4,\n\t\tmarginLeft: ACTION_SPACING,\n\t\tmarginRight: -4,\n\t\t...( ownerState.variant === 'reveal' && {\n\t\t\topacity: 0,\n\t\t\t[ `.${ selectClasses.toggle }:hover &, .${ selectClasses.toggle }:focus &, .${ selectClasses.toggle }:focus-visible &` ]: {\n\t\t\t\topacity: 1,\n\t\t\t},\n\t\t} ),\n\t\t...( ownerState.isOpen && {\n\t\t\topacity: 1,\n\t\t\tcolor: theme.fields.focusedBorderColor,\n\t\t} ),\n\t\t'& > svg': {\n\t\t\twidth: '1em',\n\t\t}\n\t} )\n);\n\nconst SelectToggle = forwardRef<HTMLDivElement, SelectToggleProps>(\n\t(\n\t\t{ onClear, ...other }, ref ) => {\n\t\tconst {\n\t\t\tid,\n\t\t\tplaceholder,\n\t\t\tgetOptionId,\n\t\t\tactiveDescendantIndex,\n\t\t\thideToggleIcon,\n\t\t\tsize,\n\t\t\tshowTags,\n\t\t\tisEmpty,\n\t\t\tallowClear,\n\t\t\tlimitTags,\n\t\t\tgetOptionValue,\n\t\t\tgetOptionLabel,\n\t\t\tselectedOptions,\n\t\t\tdeselectOption,\n\t\t\tisLoading,\n\t\t\tvariant,\n\t\t\trenderToggleContent,\n\t\t\tmoveToFirstActiveDescendant,\n\t\t\tmoveToLastActiveDescendant,\n\t\t\tcomponentIds,\n\t\t\tdisabled,\n\t\t\thandleTyping\n\t\t} = useSelectContext();\n\t\tconst { toggle, open, isOpen } = useDropdown();\n\t\tconst label = useMemo( () => selectedOptions.map( getOptionLabel ).join( ', ' ), [ selectedOptions ] );\n\t\tconst rootRef = useRef<HTMLDivElement>( null );\n\t\tconst relatedLabelFocusRef = useRelatedLabelFocus( id );\n\t\tconst mergedRef = useMergedRefs( ref, rootRef, relatedLabelFocusRef );\n\n\t\tconst [ isFocused, setIsFocused ] = useState( false );\n\t\tconst ownerState: SelectToggleOwnerState = {\n\t\t\tisOpen,\n\t\t\tisEmpty,\n\t\t\tisFocused,\n\t\t\tdisabled,\n\t\t\tsize,\n\t\t\tvariant\n\t\t};\n\n\t\tconst handleKeydown = ( event: React.KeyboardEvent<HTMLDivElement> ) => {\n\t\t\tif ( event.target !== rootRef.current || disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch ( event.key ) {\n\t\t\t\tcase 'Down':\n\t\t\t\tcase 'ArrowDown':\n\t\t\t\tcase 'Up':\n\t\t\t\tcase 'ArrowUp':\n\t\t\t\tcase 'Enter':\n\t\t\t\tcase ' ':\n\t\t\t\t\topen();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Home':\n\t\t\t\t\topen();\n\t\t\t\t\tmoveToFirstActiveDescendant();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'End':\n\t\t\t\t\topen();\n\t\t\t\t\tmoveToLastActiveDescendant();\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\thandleTyping( event ) && open();\n\t\t\t}\n\t\t};\n\n\t\tconst handleClear = ( e: React.MouseEvent ) => {\n\t\t\te.stopPropagation();\n\t\t\tonClear();\n\t\t\tclose();\n\t\t}\n\n\t\tconst classes = useComponentClasses( ownerState );\n\n\t\tlet display;\n\n\t\tif ( renderToggleContent ) {\n\t\t\tdisplay = renderToggleContent( { isOpen, selectedOptions, deselectOption } );\n\t\t} else {\n\t\t\tdisplay = <SelectToggleLabel className={ classes.toggleLabel }>{ label }</SelectToggleLabel>;\n\t\t\tif ( isEmpty ) {\n\t\t\t\tdisplay = <SelectTogglePlaceholder className={ classes.togglePlaceholder }>{ !!placeholder ? placeholder : <ZeroWidthSpace/> }</SelectTogglePlaceholder>;\n\t\t\t}\n\t\t\tif ( showTags ) {\n\t\t\t\tconst tagsToShow = !isFocused && !isOpen && limitTags > 0 ? selectedOptions.slice( 0, limitTags ) : selectedOptions;\n\t\t\t\tconst hiddenTags = selectedOptions.length - tagsToShow.length;\n\t\t\t\tdisplay = (\n\t\t\t\t\t<>\n\t\t\t\t\t\t{ !!selectedOptions.length ? (\n\t\t\t\t\t\t\t<SelectToggleTags className={ classes.toggleTags }>\n\t\t\t\t\t\t\t\t{ tagsToShow.map( ( option ) => {\n\t\t\t\t\t\t\t\t\tconst tagKey = getOptionValue( option );\n\t\t\t\t\t\t\t\t\tconst tagLabel = getOptionLabel( option );\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<SelectToggleTag key={ tagKey } className={ classes.toggleTag }>\n\t\t\t\t\t\t\t\t\t\t\t<SelectToggleTagLabel className={ classes.toggleTagLabel }>{ tagLabel }</SelectToggleTagLabel>\n\t\t\t\t\t\t\t\t\t\t\t<SelectToggleTagRemove\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={ classes.toggleTagRemove }\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={ ( e: React.MouseEvent ) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeselectOption( option );\n\t\t\t\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t</SelectToggleTag>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} ) }\n\t\t\t\t\t\t\t\t{ !!hiddenTags && <SelectToggleHiddenTagsCount className={ classes.toggleHiddenTagsCount }>{ ` +${ hiddenTags }` }</SelectToggleHiddenTagsCount> }\n\t\t\t\t\t\t\t</SelectToggleTags>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<SelectTogglePlaceholder className={ classes.togglePlaceholder }>{ !!placeholder ? placeholder : <ZeroWidthSpace/> }</SelectTogglePlaceholder>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</>\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<SelectToggleRoot\n\t\t\t\t{ ...other }\n\t\t\t\tclassName={ classes.toggle }\n\t\t\t\tref={ mergedRef }\n\t\t\t\tonFocus={ () => setIsFocused( true ) }\n\t\t\t\tonBlur={ () => setIsFocused( false ) }\n\t\t\t\tonKeyDown={ handleKeydown }\n\t\t\t\tonClick={ !disabled ? toggle : undefined }\n\t\t\t\townerState={ ownerState }\n\t\t\t\taria-controls={ componentIds.listbox }\n\t\t\t\taria-expanded={ isOpen }\n\t\t\t\taria-haspopup=\"listbox\"\n\t\t\t\taria-disabled={ disabled }\n\t\t\t\trole=\"combobox\"\n\t\t\t\ttabIndex={ 0 }\n\t\t\t\taria-activedescendant={ activeDescendantIndex > -1 ? getOptionId( activeDescendantIndex ) : undefined }\n\t\t\t>\n\t\t\t\t<SelectToggleWrap ownerState={ ownerState }>\n\t\t\t\t\t{ !!display ? display : <ZeroWidthSpace/> }\n\n\t\t\t\t\t<SelectToggleActions className={ classes.toggleActions }>\n\t\t\t\t\t\t{ isLoading && (\n\t\t\t\t\t\t\t<SelectToggleSpinner className={ classes.toggleSpinner }>\n\t\t\t\t\t\t\t\t<Spinner size={ 16 }/>\n\t\t\t\t\t\t\t</SelectToggleSpinner>\n\t\t\t\t\t\t) }\n\n\t\t\t\t\t\t{ allowClear && !isEmpty && !showTags && (\n\t\t\t\t\t\t\t<SelectToggleClear\n\t\t\t\t\t\t\t\tclassName={ classes.toggleClear }\n\t\t\t\t\t\t\t\tonClick={ handleClear }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<XMarkIcon/>\n\t\t\t\t\t\t\t</SelectToggleClear>\n\t\t\t\t\t\t) }\n\n\t\t\t\t\t\t{ !hideToggleIcon && <SelectToggleExpand className={ classes.toggleExpand } ownerState={ ownerState }>\n\t\t\t\t\t\t\t<ChevronUpDownIcon/>\n\t\t\t\t\t\t</SelectToggleExpand> }\n\t\t\t\t\t</SelectToggleActions>\n\t\t\t\t</SelectToggleWrap>\n\t\t\t</SelectToggleRoot>\n\t\t);\n\t}\n);\n\nexport default SelectToggle;","import React, { forwardRef, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { __ } from '@wordpress/i18n';\nimport { noop } from 'lodash';\nimport { generateComponentClasses, mergeComponentClasses, styled } from '@yith/styles';\n\nimport Dropdown from '../dropdown';\nimport { useControlledState, useId } from '../utils';\n\nimport type { SelectOptionParams, SelectOptionState, SelectOwnerState, SelectOwnProps, SelectProps, SelectStyled, SelectOptionProps } from \"./types\";\nimport { SelectProvider } from \"./context\";\nimport SelectOption from \"./slots/SelectOption\";\nimport SelectToggle from \"./slots/SelectToggle\";\nimport { useSelectDefaultValue } from \"./utils/useSelectDefaultValue\";\nimport { selectClasses } from \"./classes\";\nimport SelectDropdownContent from \"./slots/SelectDropdownContent\";\n\nconst useComponentClasses = ( ownerState: SelectOwnerState ) => {\n\tconst stateClasses = generateComponentClasses(\n\t\t'Select',\n\t\t{\n\t\t\troot: [ `--${ ownerState.variant }` ],\n\t\t}\n\t);\n\n\treturn mergeComponentClasses( selectClasses, stateClasses );\n}\n\nconst SelectRoot = styled( 'div', { name: 'Select', slot: 'Root' } )<SelectStyled>`\n\t${ ( { ownerState } ) => {\n\t\treturn {\n\t\t\twidth: ownerState.width,\n\t\t\tdisplay: 'inline-flex'\n\t\t};\n\t} }\n`;\n\nfunction defaultRenderOptionContent( _option: SelectOptionParams, state: SelectOptionState ) {\n\treturn state.label;\n}\n\nfunction defaultRenderOption( props: SelectOptionProps ) {\n\treturn (\n\t\t<SelectOption { ...props }>\n\t\t\t{ props.children }\n\t\t</SelectOption>\n\t);\n}\n\nconst Select = forwardRef<HTMLDivElement, SelectProps>( function Select(\n\t{\n\t\tvalue: valueProp,\n\t\tid: idProp,\n\t\tname,\n\t\tmultiple = false,\n\t\toptions = [],\n\t\tplaceholder = '',\n\t\tallowClear = false,\n\t\tallowSearch = false,\n\t\tcloseOnSelect: closeOnSelectProp,\n\t\thideSelectedOptions = false,\n\t\tisLoading = false,\n\t\tloadingText = __( 'Loading...', 'yith-plugin-fw' ),\n\t\tnoOptionsText = __( 'No options', 'yith-plugin-fw' ),\n\t\tnoResultsText = __( 'No results', 'yith-plugin-fw' ),\n\t\tonChange = noop,\n\t\tonClear = noop,\n\t\tonClose = noop,\n\t\tonSearch = noop,\n\t\tgetOptionValue = option => option?.value ?? '',\n\t\tgetOptionLabel = option => option?.label ?? '',\n\t\trenderOption = defaultRenderOption,\n\t\trenderOptionContent = defaultRenderOptionContent,\n\t\trenderToggleContent,\n\t\tfilterSearch: filterSearchProp,\n\t\tshowTags = false,\n\t\tlimitTags = 0,\n\t\twidth = 200,\n\t\tsize = 'md',\n\t\tvariant = 'outlined',\n\t\thideToggleIcon = false,\n\t\tdisabled = false,\n\t\t...other\n\t},\n\tref\n) {\n\tconst filterSearch: SelectOwnProps[ 'filterSearch' ] =\n\t\tfilterSearchProp ??\n\t\t( ( option, search ) => getOptionLabel( option ).toLowerCase().indexOf( search.toLowerCase() ) >= 0 );\n\n\tconst id = useId( idProp );\n\tconst defaultValue = useSelectDefaultValue( { multiple, allowClear, getOptionValue, options } );\n\tconst closeOnSelect = typeof closeOnSelectProp === 'undefined' ? ( !multiple ) : closeOnSelectProp;\n\tconst [ value, setValue ] = useControlledState( valueProp, defaultValue );\n\tconst arrayValue = useMemo( () => ( Array.isArray( value ) ? value : [ value ] ).filter( Boolean ), [ value ] );\n\tconst [ searchedTerm, setSearchedTerm ] = useState( '' );\n\tconst toggleRef = useRef<HTMLDivElement>( null );\n\n\tuseEffect( () => {\n\t\tif ( allowSearch ) {\n\t\t\tonSearch( searchedTerm );\n\t\t}\n\t}, [ searchedTerm ] );\n\n\tconst deselectOption = useCallback( ( option: SelectOptionParams ) => {\n\t\t\tif ( disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst optionValue = getOptionValue( option );\n\t\t\tif ( multiple ) {\n\t\t\t\tconst idx = ( value as string[] ).findIndex( _ => _ === optionValue );\n\t\t\t\tif ( idx > -1 ) {\n\t\t\t\t\tconst newValue = [ ...( value as string[] ) ];\n\t\t\t\t\tnewValue.splice( idx, 1 );\n\t\t\t\t\tsetValue( newValue );\n\t\t\t\t\tonChange( newValue );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[ getOptionValue, multiple, value, onChange, disabled ]\n\t);\n\n\tconst handleChange = useCallback( ( option: SelectOptionParams ) => {\n\t\t\tif ( disabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst optionValue = getOptionValue( option );\n\n\t\t\tallowSearch && setSearchedTerm( '' );\n\n\t\t\tif ( multiple ) {\n\t\t\t\tconst idx = ( value as string[] ).findIndex( _ => _ === optionValue );\n\t\t\t\tif ( idx > -1 ) {\n\t\t\t\t\tconst newValue = [ ...( value as string[] ) ];\n\t\t\t\t\tnewValue.splice( idx, 1 );\n\t\t\t\t\tsetValue( newValue );\n\t\t\t\t\tonChange( newValue );\n\t\t\t\t} else {\n\t\t\t\t\tsetValue( [ ...( value as string[] ), optionValue ] );\n\t\t\t\t\tonChange( [ ...( value as string[] ), optionValue ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetValue( optionValue );\n\t\t\t\tonChange( optionValue );\n\t\t\t}\n\t\t},\n\t\t[ getOptionValue, allowSearch, multiple, onChange, value, closeOnSelect, disabled ]\n\t);\n\n\tconst isOptionSelected = useCallback( ( option: SelectOptionParams ) => {\n\t\t\treturn multiple ? ( value as string[] ).includes( getOptionValue( option ) ) : value === getOptionValue( option )\n\t\t},\n\t\t[ multiple, getOptionValue, value ]\n\t);\n\n\tconst isEmpty = useMemo( () => ( multiple ? !( value as string[] ).length : !value ), [ value, multiple ] );\n\tconst selectedOptions = useMemo( () => options.filter( _ => isOptionSelected( _ ) ), [ options, value, multiple ] );\n\n\tconst filteredOptions = useMemo( () => {\n\t\tlet filtered = options;\n\n\t\tif ( hideSelectedOptions ) {\n\t\t\tfiltered = filtered.filter( option => !isOptionSelected( option ) );\n\t\t}\n\n\t\tif ( allowSearch && searchedTerm ) {\n\t\t\tfiltered = filtered.filter( option => filterSearch( option, searchedTerm ) );\n\t\t}\n\t\treturn filtered;\n\t}, [ searchedTerm, allowSearch, options, hideSelectedOptions, value ] );\n\n\tconst getOptionId = useCallback( ( index: number ) => `${ id }__option__${ index }`, [ id ] );\n\n\tconst defaultActiveDescendantIndex = useMemo( () => filteredOptions.findIndex( _ => isOptionSelected( _ ) ), [ filteredOptions, isOptionSelected ] );\n\tconst [ activeDescendantIndex, setActiveDescendantIndex ] = useState( defaultActiveDescendantIndex );\n\tconst minMaxActiveDescendant = useCallback( ( index: number ) => Math.max( 0, Math.min( filteredOptions.length - 1, index ) ), [ filteredOptions ] );\n\tconst nextActiveDescendant = useCallback( ( increment = 1 ) => setActiveDescendantIndex( _ => minMaxActiveDescendant( _ + increment ) ), [ filteredOptions ] );\n\tconst prevActiveDescendant = useCallback( ( increment = 1 ) => setActiveDescendantIndex( _ => minMaxActiveDescendant( _ - increment ) ), [ filteredOptions ] );\n\tconst moveToFirstActiveDescendant = useCallback( () => setActiveDescendantIndex( filteredOptions.length ? 0 : -1 ), [ filteredOptions ] );\n\tconst moveToLastActiveDescendant = useCallback( () => setActiveDescendantIndex( filteredOptions.length - 1 ), [ filteredOptions ] );\n\tconst unsetActiveDescendant = useCallback( () => setActiveDescendantIndex( -1 ), [] );\n\n\tuseEffect( () => {\n\t\tif ( activeDescendantIndex !== minMaxActiveDescendant( activeDescendantIndex ) ) {\n\t\t\tsetActiveDescendantIndex( minMaxActiveDescendant( activeDescendantIndex ) );\n\t\t}\n\t}, [ activeDescendantIndex, minMaxActiveDescendant ] );\n\n\tconst handleClose = () => {\n\t\tallowSearch && setSearchedTerm( '' );\n\t\tsetActiveDescendantIndex( filteredOptions.findIndex( _ => isOptionSelected( _ ) ) );\n\t\tonClose();\n\t};\n\n\tconst handleClear = () => {\n\t\tonClear();\n\t\tsetValue( multiple ? [] : '' );\n\t};\n\n\tconst [ typingTerm, setTypingTerm ] = useState( '' );\n\tconst typingTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n\tconst handleTyping = useCallback(\n\t\t( event: React.KeyboardEvent<HTMLDivElement> ) => {\n\t\t\tif ( !allowSearch && !disabled ) {\n\t\t\t\tlet stopPropagation = false;\n\n\t\t\t\tif ( event.key === 'Esc' ) {\n\t\t\t\t\tsetTypingTerm( '' );\n\t\t\t\t\tstopPropagation = true;\n\t\t\t\t} else if ( event.key.length === 1 && event.key !== ' ' ) {\n\t\t\t\t\tsetTypingTerm( _ => _ + event.key );\n\t\t\t\t\tstopPropagation = true;\n\t\t\t\t}\n\n\t\t\t\tstopPropagation && event.stopPropagation();\n\t\t\t\treturn stopPropagation;\n\t\t\t}\n\t\t\treturn false;\n\t\t}, [ disabled, allowSearch ] );\n\n\tuseEffect( () => {\n\t\tconst reset = () => setTypingTerm( '' );\n\t\tif ( typingTerm ) {\n\t\t\ttypingTimeout.current && clearTimeout( typingTimeout.current );\n\t\t\ttypingTimeout.current = setTimeout( reset, 500 );\n\t\t}\n\n\t\treturn () => typingTimeout.current && clearTimeout( typingTimeout.current );\n\t}, [ typingTerm ] );\n\n\tuseEffect( () => {\n\t\tif ( typingTerm ) {\n\t\t\tconst orderedOptions = activeDescendantIndex > 0 ? [\n\t\t\t\t...filteredOptions.slice( activeDescendantIndex + 1 ),\n\t\t\t\t...filteredOptions.slice( 0, activeDescendantIndex + 1 ),\n\t\t\t] : [ ...filteredOptions ];\n\t\t\tconst firstMatch = orderedOptions.find( _ => getOptionLabel( _ ).toLowerCase().startsWith( typingTerm.toLowerCase() ) );\n\t\t\tconst letters = typingTerm.split( '' );\n\t\t\tconst allSameLetter = letters.every( ( _ ) => _ === letters[ 0 ] );\n\n\t\t\tif ( firstMatch ) {\n\t\t\t\tsetActiveDescendantIndex( filteredOptions.indexOf( firstMatch ) );\n\t\t\t} else if ( allSameLetter ) {\n\t\t\t\tconst match = orderedOptions.find( _ => getOptionLabel( _ ).toLowerCase().startsWith( typingTerm[ 0 ].toLowerCase() ) );\n\t\t\t\tif ( match ) {\n\t\t\t\t\tsetActiveDescendantIndex( filteredOptions.indexOf( match ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}, [ typingTerm ] )\n\n\tconst ownerState: SelectOwnerState = { width, variant };\n\tconst classes = useComponentClasses( ownerState );\n\n\tconst componentIds: React.ComponentProps<typeof SelectProvider>['componentIds'] = {\n\t\tlistbox: `${ id }__listbox`,\n\t\toptions: `${ id }__options`,\n\t}\n\n\tconst providerProps: Omit<React.ComponentProps<typeof SelectProvider>, 'children'> = {\n\t\tid,\n\t\tallowClear,\n\t\tallowSearch,\n\t\tplaceholder,\n\t\thideToggleIcon,\n\t\tmultiple,\n\t\tshowTags,\n\t\tlimitTags,\n\t\tgetOptionLabel,\n\t\tgetOptionValue,\n\t\tisLoading,\n\t\tsize,\n\t\tvariant,\n\t\trenderToggleContent,\n\t\tvalue,\n\t\toptions,\n\t\trenderOption,\n\t\trenderOptionContent,\n\t\tnoOptionsText,\n\t\tnoResultsText,\n\t\tloadingText,\n\t\tcloseOnSelect,\n\t\tdisabled,\n\t\tgetOptionId,\n\t\tsearchedTerm,\n\t\tsetSearchedTerm,\n\t\tdeselectOption,\n\t\thandleChange,\n\t\tselectedOptions,\n\t\tfilteredOptions,\n\t\tisOptionSelected,\n\t\tisEmpty,\n\t\tactiveDescendantIndex,\n\t\tsetActiveDescendantIndex,\n\t\tnextActiveDescendant,\n\t\tprevActiveDescendant,\n\t\tunsetActiveDescendant,\n\t\tmoveToFirstActiveDescendant,\n\t\tmoveToLastActiveDescendant,\n\t\tcomponentIds,\n\t\thandleTyping\n\t}\n\n\treturn (\n\t\t<SelectProvider { ...providerProps }>\n\t\t\t<SelectRoot ownerState={ ownerState } { ...other } ref={ ref } id={ id } className={ classes.root }>\n\t\t\t\t{ arrayValue.map( _ => (\n\t\t\t\t\t<input key={ _ } type=\"hidden\" name={ name } value={ _ }/>\n\t\t\t\t) ) }\n\t\t\t\t<Dropdown\n\t\t\t\t\tref={ toggleRef }\n\t\t\t\t\trenderToggle={ () => <SelectToggle onClear={ handleClear }/> }\n\t\t\t\t\trenderContent={ () => <SelectDropdownContent/> }\n\t\t\t\t\tonClose={ handleClose }\n\t\t\t\t\tpopoverProps={ {\n\t\t\t\t\t\tclassName: classes.popover,\n\t\t\t\t\t\tposition: 'bottom left',\n\t\t\t\t\t\tforceMinWidth: true\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t</SelectRoot>\n\t\t</SelectProvider>\n\t);\n} );\n\nexport default Select;","import { keyframes, PaletteClass, styled, SxProps } from '@yith/styles';\nimport React from 'react';\nimport { forwardRef } from 'react';\n\ntype SpinnerOwnerState = {\n\t/**\n\t * The color of the component.\n\t */\n\tcolor: 'inherit' | 'default' | PaletteClass;\n\t/**\n\t * Choose the thickness of the line of the spinner.\n\t */\n\tthickness: number;\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize: number;\n};\ntype SpinnerPropsWithRef = Omit<React.ComponentProps<'span'>, keyof SpinnerOwnerState> & {\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize?: 'sm' | 'md' | 'lg' | 'xl' | number;\n\tsx?: SxProps;\n} & Omit<Partial<SpinnerOwnerState>, 'size'>;\n\ntype SpinnerProps = Omit<SpinnerPropsWithRef, 'ref'>\n\ntype StyledSpinnerProps = { ownerState: SpinnerOwnerState };\n\nconst SVG_SIZE = 44;\n\nconst rotateKeyframe = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dashKeyframe = keyframes`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`;\n\nconst SpinnerRoot = styled( 'span', { name: 'Spinner', slot: 'Root' } )<StyledSpinnerProps>( ( { ownerState, theme } ) => ( {\n\tdisplay: 'inline-flex',\n\tanimation: `${ rotateKeyframe } 1.4s linear infinite`,\n\twidth: ownerState.size,\n\theight: ownerState.size,\n\t...( ownerState.color === 'default' && {\n\t\tcolor: theme.palette.action.active,\n\t} ),\n\t...( ownerState.color !== 'inherit' &&\n\t\townerState.color !== 'default' && {\n\t\t\tcolor: theme.palette[ ownerState.color ].main,\n\t\t} ),\n} ) );\n\nconst SpinnerSvg = styled( 'svg', { name: 'Spinner', slot: 'Svg' } )`\n\tdisplay: block;\n`;\n\nconst SpinnerCircle = styled( 'circle', { name: 'Spinner', slot: 'Circle' } )( () => ( {\n\tstroke: 'currentColor',\n\tstrokeDasharray: '80px, 200px',\n\tstrokeDashoffset: 0,\n\tanimation: `${ dashKeyframe } 1.4s linear infinite`,\n} ) );\n\nconst Spinner = forwardRef<HTMLSpanElement, SpinnerProps>( function Spinner(\n\t{\n\t\tcolor = 'default',\n\t\tthickness = 3.6,\n\t\tsize: sizeProp = 24,\n\t\t...other\n\t},\n\tref\n) {\n\tconst size = typeof sizeProp === 'number' ? sizeProp : { sm: 16, md: 24, lg: 32, xl: 40 }[ sizeProp ] ?? 24;\n\n\tconst ownerState: SpinnerOwnerState = { color, thickness, size };\n\treturn (\n\t\t<SpinnerRoot ownerState={ ownerState } ref={ ref } { ...other }>\n\t\t\t<SpinnerSvg viewBox={ `${ SVG_SIZE / 2 } ${ SVG_SIZE / 2 } ${ SVG_SIZE } ${ SVG_SIZE }` }>\n\t\t\t\t<SpinnerCircle\n\t\t\t\t\tcx={ SVG_SIZE }\n\t\t\t\t\tcy={ SVG_SIZE }\n\t\t\t\t\tr={ ( SVG_SIZE - thickness ) / 2 }\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstrokeWidth={ thickness }\n\t\t\t\t/>\n\t\t\t</SpinnerSvg>\n\t\t</SpinnerRoot>\n\t);\n} );\n\nexport default Spinner;\n"],"names":[],"sourceRoot":""}