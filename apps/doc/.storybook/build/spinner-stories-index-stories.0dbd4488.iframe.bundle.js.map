{"version":3,"file":"spinner-stories-index-stories.0dbd4488.iframe.bundle.js","mappings":";AAeA;AAeA;;;;;;;;ACYA;;;;;;;;;;;;;;;AAiBA;;AAkBA","sources":["webpack://yith-components-doc/../../packages/components/src/container/Container.tsx","webpack://yith-components-doc/../../packages/components/src/spinner/Spinner.tsx"],"sourcesContent":["import { Breakpoint, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype ContainerProps = React.ComponentProps<'div'> & {\n\tmaxWidth?: false | Breakpoint | number;\n\tsx?: SxProps;\n};\n\ntype ContainerOwnserState = {\n\tmaxWidth: false | Breakpoint | number;\n};\n\ntype StyledContainerProps = { ownerState: ContainerOwnserState };\n\nconst ContainerRoot = styled( 'div', { name: 'Container', slot: 'Root' } )<StyledContainerProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { maxWidth } = ownerState;\n\tconst style: any = {};\n\n\tif ( maxWidth !== false ) {\n\t\tif ( typeof maxWidth === 'string' && typeof theme.breakpoints.values[ maxWidth ] !== 'undefined' ) {\n\t\t\tstyle.maxWidth = theme.breakpoints.values[ maxWidth ] + theme.breakpoints.unit;\n\t\t} else {\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\treturn style;\n} }\n`;\n\nconst Container = forwardRef<HTMLDivElement, ContainerProps>( function Container(\n\t{ children, maxWidth = false, ...props },\n\tref\n) {\n\tconst ownerState: ContainerOwnserState = { maxWidth };\n\n\treturn (\n\t\t<ContainerRoot { ...props } ownerState={ ownerState } ref={ ref }>\n\t\t\t{ children }\n\t\t</ContainerRoot>\n\t);\n} );\n\nexport default Container;\n","import { keyframes, PaletteClass, styled, SxProps } from '@yith/styles';\nimport React from 'react';\nimport { forwardRef } from 'react';\n\ntype SpinnerOwnerState = {\n\t/**\n\t * The color of the component.\n\t */\n\tcolor: 'inherit' | 'default' | PaletteClass;\n\t/**\n\t * Choose the thickness of the line of the spinner.\n\t */\n\tthickness: number;\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize: number;\n};\ntype SpinnerPropsWithRef = Omit<React.ComponentProps<'span'>, keyof SpinnerOwnerState> & {\n\t/**\n\t * Choose the size of the spinner\n\t */\n\tsize?: 'sm' | 'md' | 'lg' | 'xl' | number;\n\tsx?: SxProps;\n} & Omit<Partial<SpinnerOwnerState>, 'size'>;\n\ntype SpinnerProps = Omit<SpinnerPropsWithRef, 'ref'>\n\ntype StyledSpinnerProps = { ownerState: SpinnerOwnerState };\n\nconst SVG_SIZE = 44;\n\nconst rotateKeyframe = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst dashKeyframe = keyframes`\n  0% {\n    stroke-dasharray: 1px, 200px;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -15px;\n  }\n\n  100% {\n    stroke-dasharray: 100px, 200px;\n    stroke-dashoffset: -125px;\n  }\n`;\n\nconst SpinnerRoot = styled( 'span', { name: 'Spinner', slot: 'Root' } )<StyledSpinnerProps>( ( { ownerState, theme } ) => ( {\n\tdisplay: 'inline-flex',\n\tanimation: `${ rotateKeyframe } 1.4s linear infinite`,\n\twidth: ownerState.size,\n\theight: ownerState.size,\n\t...( ownerState.color === 'default' && {\n\t\tcolor: theme.palette.action.active,\n\t} ),\n\t...( ownerState.color !== 'inherit' &&\n\t\townerState.color !== 'default' && {\n\t\t\tcolor: theme.palette[ ownerState.color ].main,\n\t\t} ),\n} ) );\n\nconst SpinnerSvg = styled( 'svg', { name: 'Spinner', slot: 'Svg' } )`\n\tdisplay: block;\n`;\n\nconst SpinnerCircle = styled( 'circle', { name: 'Spinner', slot: 'Circle' } )( () => ( {\n\tstroke: 'currentColor',\n\tstrokeDasharray: '80px, 200px',\n\tstrokeDashoffset: 0,\n\tanimation: `${ dashKeyframe } 1.4s linear infinite`,\n} ) );\n\nconst Spinner = forwardRef<HTMLSpanElement, SpinnerProps>( function Spinner(\n\t{\n\t\tcolor = 'default',\n\t\tthickness = 3.6,\n\t\tsize: sizeProp = 24,\n\t\t...other\n\t},\n\tref\n) {\n\tconst size = typeof sizeProp === 'number' ? sizeProp : { sm: 16, md: 24, lg: 32, xl: 40 }[ sizeProp ] ?? 24;\n\n\tconst ownerState: SpinnerOwnerState = { color, thickness, size };\n\treturn (\n\t\t<SpinnerRoot ownerState={ ownerState } ref={ ref } { ...other }>\n\t\t\t<SpinnerSvg viewBox={ `${ SVG_SIZE / 2 } ${ SVG_SIZE / 2 } ${ SVG_SIZE } ${ SVG_SIZE }` }>\n\t\t\t\t<SpinnerCircle\n\t\t\t\t\tcx={ SVG_SIZE }\n\t\t\t\t\tcy={ SVG_SIZE }\n\t\t\t\t\tr={ ( SVG_SIZE - thickness ) / 2 }\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstrokeWidth={ thickness }\n\t\t\t\t/>\n\t\t\t</SpinnerSvg>\n\t\t</SpinnerRoot>\n\t);\n} );\n\nexport default Spinner;\n"],"names":[],"sourceRoot":""}