{"version":3,"file":"972.c75f62ab.iframe.bundle.js","mappings":";AAeA;AAeA;;;;;;;;;;;ACwCA","sources":["webpack://yith-components-doc/../../packages/components/src/container/Container.tsx","webpack://yith-components-doc/../../packages/components/src/switch/Switch.tsx"],"sourcesContent":["import { Breakpoint, styled, SxProps } from '@yith/styles';\nimport React, { forwardRef } from 'react';\n\ntype ContainerProps = React.ComponentProps<'div'> & {\n\tmaxWidth?: false | Breakpoint | number;\n\tsx?: SxProps;\n};\n\ntype ContainerOwnserState = {\n\tmaxWidth: false | Breakpoint | number;\n};\n\ntype StyledContainerProps = { ownerState: ContainerOwnserState };\n\nconst ContainerRoot = styled( 'div', { name: 'Container', slot: 'Root' } )<StyledContainerProps>`\n\t${ ( { ownerState, theme } ) => {\n\tconst { maxWidth } = ownerState;\n\tconst style: any = {};\n\n\tif ( maxWidth !== false ) {\n\t\tif ( typeof maxWidth === 'string' && typeof theme.breakpoints.values[ maxWidth ] !== 'undefined' ) {\n\t\t\tstyle.maxWidth = theme.breakpoints.values[ maxWidth ] + theme.breakpoints.unit;\n\t\t} else {\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\treturn style;\n} }\n`;\n\nconst Container = forwardRef<HTMLDivElement, ContainerProps>( function Container(\n\t{ children, maxWidth = false, ...props },\n\tref\n) {\n\tconst ownerState: ContainerOwnserState = { maxWidth };\n\n\treturn (\n\t\t<ContainerRoot { ...props } ownerState={ ownerState } ref={ ref }>\n\t\t\t{ children }\n\t\t</ContainerRoot>\n\t);\n} );\n\nexport default Container;\n","import { noop } from 'lodash';\nimport { forwardRef, useState } from 'react';\n\nimport { styled } from '@yith/styles';\nimport { CheckIcon, XMarkIcon } from \"@heroicons/react/20/solid\";\n\nimport { useControlledState, ZeroWidthSpace } from \"../utils\";\nimport React from 'react';\nimport type { SwitchOwnerState, SwitchProps, SwitchStyled } from \"./types\";\n\nconst SwitchRoot = styled( 'span', { name: 'Switch', slot: 'Root' } )<SwitchStyled>( ( { ownerState, theme } ) => {\n\tconst { size, color, checked, isFocused } = ownerState;\n\tconst background = !checked ? ( 'light' === theme.mode ? theme.palette.grey[ 200 ] : theme.palette.grey[ 600 ] ) : theme.palette[ color ].main;\n\tconst foreground = !checked ? theme.palette.grey[ 500 ] : theme.palette[ color ].main;\n\tconst focusedShadowColor = theme.palette[ color ].main;\n\n\treturn {\n\t\tdisplay: 'inline-block',\n\t\tcursor: 'pointer',\n\t\tposition: 'relative',\n\t\ttransition: 'all 0.3s',\n\t\tboxSizing: 'border-box',\n\t\tuserSelect: 'none',\n\t\tbackground: background,\n\t\tcolor: foreground,\n\t\twidth: 44,\n\t\theight: 24,\n\t\tborderRadius: 24,\n\t\tlineHeight: '20px',\n\t\tborder: '2px solid #0000',\n\t\tboxShadow: '0 0 0 0 rgba(0,0,0,0)',\n\t\t...( size === 'sm' && {\n\t\t\twidth: 36,\n\t\t\theight: 20,\n\t\t\tborderRadius: 20,\n\t\t\tlineHeight: '16px',\n\t\t} ),\n\t\t...( size === 'lg' && {\n\t\t\twidth: 52,\n\t\t\theight: 28,\n\t\t\tborderRadius: 28,\n\t\t\tlineHeight: '24px',\n\t\t} ),\n\t\t...( size === 'xl' && {\n\t\t\twidth: 60,\n\t\t\theight: 32,\n\t\t\tborderRadius: 32,\n\t\t\tlineHeight: '28px',\n\t\t} ),\n\t\t...( isFocused && {\n\t\t\tboxShadow: `0 0 0px 2px ${ theme.palette.background.default }, 0 0 0px 4px ${ focusedShadowColor }`\n\t\t} ),\n\t\t...( ownerState.disabled && {\n\t\t\topacity: theme.palette.action.disabledOpacity,\n\t\t\tcursor: 'not-allowed'\n\t\t} )\n\t}\n} );\nconst SwitchField = styled( 'input', { name: 'Switch', slot: 'Field' } )`\n\tposition: absolute !important;\n\topacity: 0 !important;\n\tmargin: 0 !important;\n\tpadding: 0 !important;\n\tleft: 0 !important;\n\ttop: 0 !important;\n\twidth: 100% !important;\n\theight: 100% !important;\n\tcursor: inherit !important;\n\tz-index: 1 !important;\n`;\nconst SwitchThumb = styled( 'span', { name: 'Switch', slot: 'Thumb' } )<SwitchStyled>( ( { ownerState } ) => ( {\n\tbackground: '#fff',\n\tborderRadius: '50%',\n\tposition: 'absolute',\n\ttransition: 'all 0.2s cubic-bezier(.4,0,.2,1)',\n\tboxSizing: 'border-box',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'center',\n\tfontSize: '10px',\n\twidth: 20,\n\theight: 20,\n\ttop: 0,\n\tleft: !ownerState.checked ? 0 : 20,\n\tboxShadow: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px -1px rgba(0,0,0,0.1)',\n\t...( ownerState.size === 'sm' && {\n\t\twidth: 16,\n\t\theight: 16,\n\t\tleft: !ownerState.checked ? 0 : 16,\n\t\tfontSize: '8px',\n\t} ),\n\t...( ownerState.size === 'lg' && {\n\t\twidth: 24,\n\t\theight: 24,\n\t\tleft: !ownerState.checked ? 0 : 24,\n\t\tfontSize: '12px',\n\t} ),\n\t...( ownerState.size === 'xl' && {\n\t\twidth: 28,\n\t\theight: 28,\n\t\ttop: 0,\n\t\tleft: !ownerState.checked ? 0 : 28,\n\t\tfontSize: '14px',\n\t} ),\n\t'& > svg': {\n\t\twidth: '1em',\n\t\tstrokeWidth: 2,\n\t\tstroke: 'currentColor'\n\t}\n} ) );\n\nconst Switch = forwardRef<HTMLInputElement, SwitchProps>( function Switch(\n\t{\n\t\ttype = 'checkbox',\n\t\tcolor = 'primary',\n\t\tchecked: checkedProp,\n\t\tdisabled = false,\n\t\tonChange = noop,\n\t\tclassName,\n\t\tname,\n\t\tonFocus = noop,\n\t\tonBlur = noop,\n\t\tsize = 'md',\n\t\t...other\n\t}: SwitchProps,\n\tref\n) {\n\tconst [ isChecked, setIsChecked ] = useControlledState( checkedProp, false );\n\tconst [ isFocused, setIsFocused ] = useState( false );\n\n\tconst handleChange = ( event: React.ChangeEvent<HTMLInputElement> ) => {\n\t\tif ( disabled ) {\n\t\t\tevent.preventDefault();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( event.nativeEvent.defaultPrevented ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newChecked = event.target.checked;\n\t\tsetIsChecked( newChecked );\n\n\t\tonChange( event, newChecked );\n\t};\n\n\tconst handleFocus = ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\tsetIsFocused( true );\n\t\tonFocus( e );\n\t};\n\n\tconst handleBlur = ( e: React.FocusEvent<HTMLInputElement> ) => {\n\t\tsetIsFocused( false );\n\t\tonBlur( e );\n\t};\n\n\tconst ownerState: SwitchOwnerState = {\n\t\tchecked: isChecked,\n\t\tdisabled,\n\t\tisFocused,\n\t\tcolor,\n\t\tsize\n\t};\n\n\tconst IconComponent = isChecked ? CheckIcon : XMarkIcon;\n\n\treturn (\n\t\t<SwitchRoot\n\t\t\tclassName={ className }\n\t\t\townerState={ ownerState }\n\t\t>\n\t\t\t<SwitchField\n\t\t\t\tref={ ref }\n\t\t\t\ttype=\"checkbox\"\n\t\t\t\tchecked={ isChecked }\n\t\t\t\t{ ...other }\n\t\t\t\tonChange={ handleChange }\n\t\t\t\tonFocus={ handleFocus }\n\t\t\t\tonBlur={ handleBlur }\n\t\t\t\treadOnly\n\t\t\t\trole=\"switch\"\n\t\t\t\ttabIndex={ 0 }\n\t\t\t\taria-checked={ isChecked }\n\t\t\t\tname={ 'checkbox' === type ? name : '' }\n\t\t\t\tdisabled={ disabled }\n\t\t\t/>\n\t\t\t{ 'hidden' === type && <input type=\"hidden\" value={ isChecked ? 'yes' : 'no' } name={ name }/> }\n\t\t\t<SwitchThumb ownerState={ ownerState }>\n\t\t\t\t<IconComponent/>\n\t\t\t</SwitchThumb>\n\t\t\t<ZeroWidthSpace/>\n\t\t</SwitchRoot>\n\t);\n} );\n\nexport default Switch;\n"],"names":[],"sourceRoot":""}