{"version":3,"file":"modal-stories-index-stories.c2604f66.iframe.bundle.js","mappings":";;;;;;;AAeA;;;;;;;;;ACUA","sources":["webpack://yith-components-doc/../../packages/components/src/backdrop/Backdrop.tsx","webpack://yith-components-doc/../../packages/components/src/modal/Modal.tsx"],"sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\nimport { generateComponentClasses, keyframes, styled } from \"@yith/styles\";\n\nimport type { BackdropProps, BackdropStyled } from \"./types\";\n\nconst fadeInAnimation = keyframes`\nfrom {\n\topacity: 0;\n}\nto {\n\topacity: 1;\n}\n`;\n\nconst BackdropRoot = styled( 'div', { name: 'Backdrop', slot: 'Root' } )(\n\t( { theme }: BackdropStyled ) => ( {\n\t\tposition: 'fixed',\n\t\ttop: 0,\n\t\tleft: 0,\n\t\twidth: '100%',\n\t\theight: '100%',\n\t\tbackground: theme.palette.background.backdrop,\n\t\tbackdropFilter: 'blur(4px)',\n\t\tanimation: `${fadeInAnimation} .3s forwards`\n\t} )\n);\n\nconst useComponentClasses = () => {\n\treturn generateComponentClasses(\n\t\t'Backdrop',\n\t\t{\n\t\t\troot: [ 'root' ]\n\t\t}\n\t)\n}\n\nconst Backdrop = React.forwardRef<HTMLDivElement, BackdropProps>( function Backdrop(\n\t{\n\t\tclassName,\n\t\tchildren,\n\t\t...other\n\t},\n\tref\n) {\n\n\tconst classes = useComponentClasses()\n\n\treturn <BackdropRoot\n\t\tref={ ref }\n\t\taria-hidden\n\t\tclassName={ classNames( classes.root, className ) }\n\t\t{ ...other }\n\t>\n\t\t{ children }\n\t</BackdropRoot>\n} )\n\nexport default Backdrop;","import React, { forwardRef } from \"react\";\nimport classNames from \"classnames\";\nimport { XMarkIcon } from \"@heroicons/react/20/solid\";\n\nimport { Breakpoint, generateComponentClasses, keyframes, styled } from \"@yith/styles\";\n\nimport type { ModalOwnerState, ModalProps, ModalStyled } from \"./types\";\nimport Portal from \"../portal\";\nimport Backdrop from \"../backdrop\";\nimport IconButton from \"../icon-button\";\nimport Paper from \"../paper\";\nimport { useMainView } from \"../utils\";\nimport { FocusTrap } from \"../focus-trap\";\n\nconst appearFromBottomAnimation = keyframes`\n\tfrom {\n\t\topacity: 0;\n\t\ttransform: translateY(30%);\n\t}\n\tto {\n\t\topacity: 1;\n\t\ttransform: translateY(0);\n\t}\n`;\n\nconst ModalRoot = styled( 'div', { name: 'Modal', slot: 'Root' } )(\n\t( { theme } ) => ( {\n\t\tposition: 'fixed',\n\t\tzIndex: theme.zIndex.modal,\n\t\tinset: '0px'\n\t} ) );\n\nconst ModalBackdrop = styled( Backdrop, { name: 'Modal', slot: 'Backdrop' } )( () => ( {\n\tzIndex: -1\n} ) );\n\nconst ModalClose = styled( IconButton, { name: 'Modal', slot: 'Close' } )( () => ( {\n\tposition: 'absolute',\n\ttop: 4,\n\tright: 4,\n\t'& > svg': {\n\t\twidth: '1em'\n\t}\n} ) );\n\nconst ModalContainer = styled( 'div', { name: 'Modal', slot: 'Container' } )( () => ( {\n\theight: '100%',\n\tdisplay: 'flex',\n\talignItems: 'center',\n\tjustifyContent: 'center'\n} ) );\n\nconst ModalPaper = styled( Paper, { name: 'Modal', slot: 'Paper' } )<ModalStyled>( ( { ownerState, theme } ) => ( {\n\tmargin: 32,\n\toverflowX: 'auto',\n\tdisplay: 'flex',\n\tflexDirection: 'column',\n\tmaxHeight: 'calc(100% - 64px)',\n\tanimation: `${ appearFromBottomAnimation } .3s forwards`,\n\t...( ownerState.maxWidth === 'xs' && {\n\t\tmaxWidth: theme.breakpoints.unit === 'px' ? Math.max( theme.breakpoints.values.xs, 400 ) : `max( ${ theme.breakpoints.values.xs }${ theme.breakpoints.unit }, 400px )`\n\t} ),\n\t...( ownerState.maxWidth && ownerState.maxWidth !== 'xs' && {\n\t\tmaxWidth: theme.breakpoints.values[ ownerState.maxWidth as Breakpoint ] ?? ownerState.maxWidth\n\t} ),\n\t...( ownerState.fullWidth && {\n\t\twidth: '100%'\n\t} )\n} ) );\n\nconst useComponentClasses = () => {\n\treturn generateComponentClasses(\n\t\t'Modal',\n\t\t{\n\t\t\troot: [ 'root' ],\n\t\t\tbackdrop: [ 'backdrop' ],\n\t\t\tcontainer: [ 'container' ],\n\t\t\tpaper: [ 'paper' ],\n\t\t\tclose: [ 'close' ],\n\t\t}\n\t)\n}\n\nconst Modal = forwardRef<HTMLDivElement, ModalProps>( function Modal(\n\t{\n\t\tclassName,\n\t\topen = false,\n\t\tdisablePortal = false,\n\t\tmaxWidth = 'sm',\n\t\tfullWidth = true,\n\t\tonClose,\n\t\tchildren,\n\t\tdisableRestoreFocus = false,\n\t\tdisableAutoFocus = false,\n\t\tdisableConstrainedFocus = false,\n\t},\n\tref\n) {\n\n\tuseMainView(\n\t\topen,\n\t\t{\n\t\t\tonEscapeKeyDown: ( event ) => onClose?.( event, 'escapeKeyDown' )\n\t\t}\n\t);\n\n\tconst ownerState: ModalOwnerState = {\n\t\tmaxWidth,\n\t\tfullWidth\n\t};\n\n\tconst isBackdropClick = React.useRef( false );\n\tconst handleMouseDown = ( event: React.MouseEvent ) => {\n\t\tisBackdropClick.current = event.target === event.currentTarget;\n\t};\n\n\tconst handleBackdropClick = ( event: React.MouseEvent ) => {\n\t\tif ( !isBackdropClick.current ) {\n\t\t\treturn;\n\t\t}\n\n\t\tisBackdropClick.current = false;\n\n\t\tonClose?.( event, 'backdropClick' );\n\t}\n\n\tconst handleCloseIconClick = ( event: React.MouseEvent ) => {\n\t\tonClose?.( event, 'closeIconClick' );\n\t}\n\n\tconst classes = useComponentClasses();\n\n\tif ( !open ) {\n\t\treturn null;\n\t}\n\n\treturn <Portal disablePortal={ disablePortal }>\n\t\t<ModalRoot ref={ ref } role=\"presentation\" onClick={ handleBackdropClick } className={ classNames( classes.root, className ) }>\n\t\t\t<ModalBackdrop className={ classes.backdrop }/>\n\t\t\t<ModalContainer onMouseDown={ handleMouseDown } className={ classes.container }>\n\t\t\t\t<FocusTrap open disableRestoreFocus={ disableRestoreFocus } disableAutoFocus={ disableAutoFocus } disableConstrainedFocus={ disableConstrainedFocus }>\n\t\t\t\t\t<ModalPaper className={ classes.paper } ownerState={ ownerState } elevation={ 24 }>\n\t\t\t\t\t\t{ children }\n\t\t\t\t\t\t<ModalClose className={ classes.close } onClick={ handleCloseIconClick } size=\"sm\" fontSize=\"lg\"><XMarkIcon/></ModalClose>\n\t\t\t\t\t</ModalPaper>\n\t\t\t\t</FocusTrap>\n\t\t\t</ModalContainer>\n\t\t</ModalRoot>\n\t</Portal>\n} );\n\nexport default Modal;"],"names":[],"sourceRoot":""}